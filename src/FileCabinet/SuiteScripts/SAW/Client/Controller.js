//------------------------------------------------------------------
// Copyright 2019, All rights reserved, Prolecto Resources, Inc.
//
// No part of this file may be copied or used without express, written
// permission of Prolecto Resources, Inc.
//------------------------------------------------------------------

//------------------------------------------------------------------
// Description: SAW Controller Client Script
// Developer: Sylvain Muise
// Date: October, 2019
// Notes:()
//------------------------------------------------------------------

//  A counter used in 'Immediate Family' screen to keep track of new members
//  that are created
//var newCount = 0;

window.addEventListener('DOMContentLoaded', function() {
var startTime = Date.now();
log('Initialization start.');

//  The main Model and View objects are created here.
//  Each is initialized as a local variable in the Controller script,
//  and each is stored as a reference in the other, to ease access between
//  them.
var wizard = new Wizard();
var render = new Render();
render.wizard = wizard;
wizard.render = render;

//  The remainder of the Controller script contains definitions of handlers
//  for both the Model (Wizard) and View (Render) modules.

//  The Wizard's handler object contains 5 main sections:
//  afterScreen - routines to run after the user clicks past a screen
//  afterSection - routines to run after the user clicks past a section
//  beforeScreen - routines to run before the user is brought to a screen
//  beforeSection - routines to run before the user is brought to a section
//  sendToSubscreen - routines to run after the user clicks on a row in
//                    table generated by a search.
wizard.handler = {

//  In general, the afterScreen handlers return which screen the wizard
//  should move to next.
afterScreen : {
    
	 immediateFamily : function() {
		// adding to get phone number from informant
		 var informant = wizard.getValue('service', 'informant');
		 if (informant) {
           var relationshipId = wizard.table.immediateFamily.reduce(
           function(acc, relationship) {
               return relationship.getValue('linkedClient') == informant ?
                       relationship.id :
                           acc;
           }, '');
		 
  		 var row = wizard.getTableRow('immediateFamily', relationshipId);
		 var phoney = row.getValue('phone')
		 if(phoney){
		//alert(phoney);
		 }
		 else{
			// alert('BLANK'); 
		 }
		 
		}
		
	 },
	
	
    casket : function() {
        var casketSize = wizard.getCurrentFieldValue('casketSize');
        var existingCasketSize = wizard.getValue('intermentOrder', 'casketSize');
        if (casketSize != existingCasketSize) {
            // when loaded from start, test variable blow has an id property that can be used to save data
            var intermentId = wizard.entity['intermentOrder'].id;
            if (intermentId != 'new') {
                wizard.pushToSave('intermentOrder', 'casketSize', casketSize);
            }
        }

        var casketName = (wizard.getCurrentFieldValue('outsideCasket')) ?
                        'Outside' :
                        lib.removeDollars(wizard.getCurrentFieldText('casket'));     
        if (casketName != wizard.getValue('mortPrep', 'casketName')){
            wizard.pushToSave('mortPrep', 'casketName', casketName);
        }
    },
    
    //  If the decedent has a surviving spouse, move to that screen next.
    //  Otherwise, move to the fatherParent screen.
//     decedentsResidence : function() {
// //          var country = wizard.getCurrentFieldValue('countryInBook');
// //          if (country == 'US')
// //              wizard.pushToSave('decedent', 'stateText', '');
// //          else
// //              wizard.pushToSave('decedent', 'stateDropDown', '');
//         if (wizard.getValue('decedent', 'spouse')){
//         //	alert('SURVIVING');
//             return 'survivingSpouse';
//         }
//         else{
//         //	alert('NOT SURVIVING');
//             return 'fatherParent';
//         }
//     },

    //  This handler will set a flag that the user is buying property or
    //  not, which is used at the end of the wizard to decide whether to
    //  run the appropriate CRE profile.
    //  If there is no property selected, move to the next section.
    //  Otherwise, go to the deed screen.
    property : function() {
        wizard.flags.buyingProperty =
            (!wizard.getCurrentFieldValue('decedentHasProperty'));
        var spaceId = wizard.getCurrentFieldValue('intermentSpace');
        if (spaceId == CNST.toBeDecided || wizard.getCurrentFieldValue('cemetery') == 2)
            return 'nextSection';
        else
            return 'deed';
    },

    //  This handler decides whether to go to vitals2a screen if the
    //  decedent's age was less than one year when they deceased.
    vitals2 : function() {
        var dob = wizard.getCurrentFieldValue('dateOfBirth');
//          var dob_mdy = lib.arrayCCW(dob.split('-')).join('/');
//          var dob = new Date(dob_mdy);

        var dod = wizard.getCurrentFieldValue('dateOfDeath');
//          var dod_mdy = lib.arrayCCW(dod.split('-')).join('/');
//          var dod = new Date(dod_mdy);

        var lifespan = dod - dob;
        if (lifespan <= CNST.oneYear)
            return 'vitals2a';
        else
            return 'vitals3';
    },
    vitals3 : function(callback) {
        var ethnicity = wizard.getCurrentFieldText('ethnicity');
        var hispanic = wizard.getValue('decedent', 'hispanic');
        var specify = wizard.getValue('decedent', 'hispanicSpecify');
        if (ethnicity == CNST.hispanic) {
            if (!hispanic)
                wizard.pushToSave('decedent', 'hispanic', true);
        } else {
            if (hispanic)
                wizard.pushToSave('decedent', 'hispanic', false);
            if (specify)
                wizard.pushToSave('decedent', 'hispanicSpecify', '');
        }

        var placeOfBirth = wizard.getCurrentFieldText('placeOfBirth');
        var birthState = wizard.getCurrentFieldValue('birthState');
        if (placeOfBirth != CNST.US && birthState)
            wizard.pushToSave('decedent', 'birthState', '');

        var spouse = wizard.getCurrentFieldValue('spouse');
        var relationship = wizard.getSpouseRelationship();
        var message = 'Saving Client Relationship';
        if (spouse) {
            
            if (relationship) {
                if (relationship.getValue('linkedClient') != spouse) {
                	
                    wizard.showLoadingSubscreen(message);
                    wizard.deleteRelationship(relationship.id, function() {
                        wizard.removeRelationship(relationship.id);
                        wizard.createSpouseRelationship(spouse,
                        function(saveResult) {
                            if (saveResult.success) {
                                wizard.addRelationship(saveResult.id, callback);
                            } else {
                                callback();
                            }
                        })
                    });
                } else {
                    callback();
                }
            } else {
                wizard.showLoadingSubscreen(message);
                wizard.createSpouseRelationship(spouse,
                function(saveResult) {
                    if (saveResult.success) {
                        wizard.addRelationship(saveResult.id, callback);
                    } else {
                        callback();
                    }
                })
            }
        } else {
            if (relationship) {
                wizard.showLoadingSubscreen(message);
                wizard.deleteRelationship(relationship.id, function() {
                    wizard.removeRelationship(relationship.id);
                    callback();
                });
            } else {
                callback();
            }
        }
    },

    // consolidation of vitals2 and vitals3 methods above
    vitals1 : function(callback) {
        console.log('Vitals Screen', typeof callback, callback)
        var ethnicity = wizard.getCurrentFieldText('ethnicity');
        var hispanic = wizard.getValue('decedent', 'hispanic');
        var specify = wizard.getValue('decedent', 'hispanicSpecify');
        if (ethnicity == CNST.hispanic) {
            if (!hispanic)
                wizard.pushToSave('decedent', 'hispanic', true);
        } else {
            if (hispanic)
                wizard.pushToSave('decedent', 'hispanic', false);
            if (specify)
                wizard.pushToSave('decedent', 'hispanicSpecify', '');
        }

        var placeOfBirth = wizard.getCurrentFieldText('placeOfBirth');
        var birthState = wizard.getCurrentFieldValue('birthState');
        if (placeOfBirth != CNST.US && birthState)
            wizard.pushToSave('decedent', 'birthState', '');

        var spouse = wizard.getCurrentFieldValue('spouse');
        var relationship = wizard.getSpouseRelationship();
        var message = 'Saving Client Relationship';
        if (spouse) {
            
            if (relationship) {
                if (relationship.getValue('linkedClient') != spouse) {
                	
                    wizard.showLoadingSubscreen(message);
                    wizard.deleteRelationship(relationship.id, function() {
                        wizard.removeRelationship(relationship.id);
                        wizard.createSpouseRelationship(spouse,
                        function(saveResult) {
                            if (saveResult.success) {
                                wizard.addRelationship(saveResult.id, callback);
                            } else {
                                callback();
                            }
                        })
                    });
                } else {
                    callback();
                }
            } else {
                wizard.showLoadingSubscreen(message);
                wizard.createSpouseRelationship(spouse,
                function(saveResult) {
                    if (saveResult.success) {
                        wizard.addRelationship(saveResult.id, callback);
                    } else {
                        callback();
                    }
                })
            }
        } else {
            if (relationship) {
                wizard.showLoadingSubscreen(message);
                wizard.deleteRelationship(relationship.id, function() {
                    wizard.removeRelationship(relationship.id);
                    callback();
                });
            } else {
                callback();
            }
        }

        
        var dob = wizard.getCurrentFieldValue('dateOfBirth');
        var dod = wizard.getCurrentFieldValue('dateOfDeath');
        var lifespan = dod - dob;
        if (lifespan <= CNST.oneYear)
            return 'vitals2a';
        else
            return 'workEducation';
    }
},



//  The afterSection handlers take care of special cases where the data to
//  be saved to server is not directly equal to the fields on-screen.
afterSection : {

    //  This handler will create a new interment order after the property
    //  section if the user has selected a property space, and none exists
    //  already.
    //  ********************************************************************
    //  Needs some work to update fields on the decedent if a new record
    //  is created???
    //  ********************************************************************

	
	// casket : function(){
    //      var postNeedText = wizard.getText('service', 'postNeed');
         
    //      if (wizard.getValue('service', 'postNeed')){
    //          return 'notices';
    //          }
         
    //      else{
    //     	 return 'certifiedCopies';
    //      	}
       
    // },
	
	property : function() {
        var intermentSpace = wizard.getField('property', 'intermentSpace');
        var deed = wizard.getField('deed', 'deed');
        var cemetery = wizard.getFieldText('property', 'cemetery');
        
        if (intermentSpace.value
                && intermentSpace.value != CNST.toBeDecided
                && wizard.getId('intermentOrder') == 'new') {
            wizard.createIntermentOrder(intermentSpace.value, 'property');
            if (cemetery == CNST.inside)
                return 'earthOff';
        } else {
            wizard.saveEntity('service', 'property');
            if (cemetery == CNST.inside
                && wizard.getId('intermentOrder') != 'new')
                return 'earthOff';
        }
    },

    property2 : function() {
        var intermentSpace = wizard.getField('property2', 'intermentSpace');
        var deed = wizard.getField('deed2', 'deed');
        if (intermentSpace.value
                && intermentSpace.value != CNST.toBeDecided
                && wizard.getId('intermentOrder') == 'new') {
            wizard.createIntermentOrder(intermentSpace.value, 'property2');
        } else {
            wizard.saveEntity('service', 'property2');
        }
    },

    serviceScheduling : function(section) {
//          log('section', section.screens[0].subscreen.id);
//          log('subscreen id', wizard.getSubscreen().id);
//          if (wizard.getSubscreen().id != 'alreadyScheduled')

        var fields = section.screens[0].fields;
        var subscreen = section.screens[0].subscreen;
        var noService = null;
        var scheduleToBeDetermined = null;
        for (var i=0; i<fields.length; i++) {
            if (fields[i].id === 'noService') {
                noService = fields[i].value
            }
            if (fields[i].id === 'scheduleToBeDetermined') {
                scheduleToBeDetermined = fields[i].value
            }
        }

        if (noService !== true && scheduleToBeDetermined !== true && (!!subscreen && subscreen.id != 'alreadyScheduled'))
            wizard.saveTimeSlot(render.getChosenTimeSlotId());
        else if ((noService === true || scheduleToBeDetermined === true) && (!!subscreen && subscreen.id == 'alreadyScheduled'))
            wizard.clearTimeSlot();
        
        if (scheduleToBeDetermined === true) {
            wizard.clearTimeSlot();
            wizard.scheduleToBeDetermined();
        }
    },

    //  Decides which service type to save to the service record according
    //  to the logic provided by David.
    serviceType : function() {

        /* Commented out as a test
        var intermentType = wizard.getField('serviceType', 'intermentType');
        var haveService = wizard.getField('serviceType', 'haveService');
        var decedentPresent = wizard.getField('serviceType', 'decedentPresent');

        switch(intermentType.text) {
            case CNST.alreadyInterred:
                var text = CNST.memorial;
                break;
            case CNST.cremation:
            case CNST.traditional:
                if (!haveService.value)
                    var text = CNST.msConvenience;
                else if (!decedentPresent.value)
                    var text = CNST.memorial;
                else
                    var text = CNST.funeral;
                break;
            case CNST.noInterment:
                if (!decedentPresent.value)
                    var text = CNST.memorial;
                else
                    var text = CNST.funeral;
                break;
            default:
        }
        var value = wizard.getListOptionValue('serviceType', text);

        var entityValue = wizard.getValue('service', 'serviceType');
        
        if (value != entityValue)
            wizard.pushToSave('service', 'serviceType', value);

        var toSaves = wizard.entity.service.toSave;
        var savingPark = toSaves.map(function(toSave) {
            return toSave.fieldId;
        }).includes('park');
        
        if (savingPark) {
            var parkToSave = toSaves.reduce(function(acc, toSave) {
                return toSave.fieldId == 'park' ? toSave.value : acc;
            }, '');
            wizard.entity.service.setValue('park', parkToSave);
        }
        */
        
        //attempting add pushtosave here for Int_Order
        //otherContactCase 
        
     //   var informant = wizard.getValue('service', 'informant');
        
      //  wizard.saveEntity('service', 'property2');
        
//          var savingLocation = toSaves.map(function(toSave) {
//              return toSave.fieldId;
//          }).includes('serviceLocation');
//          if (savingLocation) {
//              var locationValue = toSaves.reduce(function(acc, toSave) {
//                  if (toSave.fieldId == 'serviceLocation')
//                      return toSave.value;
//                  else
//                      return acc;
//              }, '');
//              switch(wizard.getListOptionText('serviceLocation',
//                      locationValue)) {
//              case CNST.hhMSChapel:
//                  var chapelText = CNST.msChapel;
//                  break;
//              case CNST.hhTanachChapel:
//                  var chapelText = CNST.tanachChapel;
//                  break;
//              case CNST.svKamenirChapel:
//                  var chapelText = CNST.kamenirChapel;
//                  break;
//              default:
//                  var chapelText = '';
//              }
//
//              if (chapelText) {
//                  var chapelValue = wizard.getListOptionValue('chapel',
//                                                              chapelText);
//              } else {
//                  var chapelValue = '';
//              }
//
//              wizard.pushToSave('service', 'chapel', chapelValue);
//          }

        
        wizard.saveEntity('service', 'serviceType');

        /* Commented out as a test
        wizard.getCurrentSection().summary = [{
            label : CNST.serviceType,
            text : text
        }];
        */
        
    },

    website : function() {
        wizard.saveEntities('website');
       
       /* if (!wizard.getValue('service', 'intermentSpace')
            && (wizard.getText('service', 'intermentType') != CNST.cremation))
            return 'property2';
        else*/
            return 'wrapUp';
    }
},



	

//  The beforeScreen handlers generally set up some data specific to the
//  screen. These are called after the screen is rendered, so that all the
//  screen's fields are available.
beforeScreen : {
	
    casket : function() {
        // var service = wizard.entity.service;
        // var casket = null;
        // for (var c=0; c<service.columns.length; c++) {
        //     if (service.columns[c].id !== 'casket') continue;
        //     casket = service.columns[c].value
        //     break;
        // }
        // if (casket !== null && casket !== '') {
        //     var fld = wizard.getCurrentField('casket');
        //     render.redrawField(fld);
        // }
    },
	
    //  Adjusts the 'nameOfRabbi' field if it is empty.
    //  ********************************************************************
    //  Needs to be worked on.
    //  ********************************************************************
    clergy : function() {
        var nameOfRabbi = wizard.getCurrentField('nameOfRabbi');
        // var rabbiPhone = wizard.getCurrentField('rabbiReservationPhone');
        // var templePhone = wizard.getCurrentField('templePhone');

        if (!nameOfRabbi.value) {
            nameOfRabbi.text = 'Click To Search / Create';
            render.redrawField(nameOfRabbi);
        } else {
            // var mobilePhone = wizard.getValue('rabbi', 'mobilePhone');
            // var phone = wizard.getValue('rabbi', 'phone');
            // if (!rabbiPhone.value) {
            //     rabbiPhone.value = mobilePhone;
            //     render.redrawField(rabbiPhone);
            // }
            // if (!templePhone.value) {
            //     templePhone.value = phone;
            //     render.redrawField(templePhone);
            // }
        }

    },

    collectPaperwork : function() {
        var condition = (wizard.getId('intermentOrder') != 'new');
        showFieldIff('specialInstructions', condition);
     
    },

    //  Loads the invoice related to each property in the searched for
    //  property table, to display the amount remaining to be paid.
    confirmProperty : function() {
        wizard.table.propertySpace.forEach(function(space) {
            space.columns.push(lib.objCopy(DEF.FIELD.amountRemaining));
            render.redrawSubField('propertyTable');
            var unitId = space.getValue('propertyUnit');
            wizard.loadAmountDue(unitId, function(amountRemaining) {
                space.setText('amountRemaining', amountRemaining);
                render.redrawSubField('propertyTable');
            });
        });
    },

    //  Adjusts the country field to set it to US if it is empty.
    decedentsResidence : function() {
        var country = wizard.getCurrentFieldValue('countryInBook');
        if (!country) {
            render.makeSelection('countryInBook', 'US');
            wizard.showField('stateDropDown');
            wizard.hideField('stateText');
        } else if (country == 'US') {
            wizard.showField('stateDropDown');
            wizard.hideField('stateText');
        } else {
            wizard.hideField('stateDropDown');
            wizard.showField('stateText');
        }
    },

    deed : function() {
        // wizard.buildSubscreen('noDeedFound');
        wizard.buildSubscreen('loadingDeed1');
        wizard.checkForDeed(function() {
            if (wizard.table.deed.length == 0) {
                wizard.buildSubscreen('noDeedFound');
            } else {
                wizard.buildSubscreen('confirmDeed1');
            }
        });
    },
    deed2 : function() {
        // wizard.buildSubscreen('noDeedFound');
        wizard.buildSubscreen('loadingDeed1');
        wizard.checkForDeed(function() {
            if (wizard.table.deed.length == 0) {
                wizard.buildSubscreen('noDeedFound');
            } else {
                wizard.buildSubscreen('confirmDeed2');
            }
        });
    },

    enterAddress : function() {
        debugger;
        [
            'addressLine1',
            'addressLine2',
            'cityInBook',
            'countryInBook',
            'stateDropDown',
            'stateText',
            'zip'
        ].forEach(function(fieldId) {
            var field = wizard.getSubField(fieldId);
            field.value = wizard.getValue('linkedClient', fieldId);
            render.redrawSubField(field);
        });

        var country = wizard.getSubFieldValue('countryInBook');
        if (!country) {
            render.makeSelection('countryInBook', 'US');
            wizard.showSubField('stateDropDown');
            wizard.hideSubField('stateText');
        } else if (country == 'US') {
            wizard.showSubField('stateDropDown');
            wizard.hideSubField('stateText');
        } else {
            wizard.hideSubField('stateDropDown');
            wizard.showSubField('stateText');
        }
    },

    enterName : function() {
        [
            'firstName',
            'middleName',
            'lastName'
        ].forEach(function(fieldId) {
            var field = wizard.getSubField(fieldId);
            field.value = wizard.getValue('linkedClient', fieldId);
            render.redrawSubField(field);
        });
    },

    goodsAndServices : function() {
    	var postNeed = wizard.getCurrentFieldValue('postNeed');
        var postNeedText = wizard.getText('service', 'postNeed');
        
        if (postNeedText.toLowerCase() == 'f') {
            postNeed.value = false;
        }
        
        if(postNeed.value!=false){
        	// transferOfRemains.value=null;
           // wizard.hideField('basicMortuaryServices','standardPreparation','hearse','tahara','shmira','tachrichimCotton','tachrichimLinen','tallit','yarmulke');
        }
        
        var webcast = wizard.getCurrentField('websiteWebcast');
        webcast.value = '';
        webcast.text = '';
        render.redrawField(webcast);

        var casket = wizard.getCurrentField('casket');
        casket.value = '';
        casket.text = '';
        render.redrawField(casket);
        
        // task 24
        var boolHasTrust = wizard.getFieldValue('trust','decedentHasTrust');
        if (boolHasTrust) {
            //hide item group field
            wizard.hideField('itemGroup');

            var trust = wizard.getFieldValue('trust','trust');
            wizard.getTrustItems(trust, function(data) {
                if (!data.success) return;

                var total = 0;
    
                // loop through dom fields by query selector
                var fields = document.querySelectorAll('input, select');
                for (var i=0; i<fields.length; i++) {
                    var el = fields[i];
    
                    var tag = el.tagName.toLowerCase();
                    var type = el.getAttribute('type');
                    var dataItemsAttribute = el.getAttribute('data-items');
                    var dataItem = null;
    
                    // if no data attributes, continue on to next loop item
                    if (!dataItemsAttribute || dataItemsAttribute === '') continue;
    
                    // loop through all items retrieved from the trust
                    for (var item in data.items) {
                        if (!data.items.hasOwnProperty(item)) continue;
                        // JEFF: BUG Fix for REQ-087
                        // dataItemsAttribute can be a string with comma delimited IDs
                        // split dataItemsAttribute by comma and loop through values to evaluate
                        for (var itemId of dataItemsAttribute.split(',')) {
                            if (itemId === item.toString()) {
                                dataItem = data.items[item];
                                if (total == 0) {
                                    total = data.items[item].total;
                                }
                                break;
                            }
                        }
                        // JEFF: Bugged code before REQ-087
                        // if (dataItemsAttribute.indexOf(item.toString()) > -1) {
                        //     dataItem = data.items[item];
                        //     if (total == 0) {
                        //         total = data.items[item].total;
                        //     }
                        //     break;
                        // }
                    }
    
                    // continue on if no match
                    if (dataItem == null) continue;
    
                    if (tag == 'select') {
                        var yesNo = el.options[0].text == 'No' && el.options[1].text == 'Yes';
                        if (yesNo) {
                            el.value = '1';
                        } else {
                            el.value = dataItem.id;
                        }
                        el.disabled = true;
                    } 
                    else if (type == 'checkbox') {
                        el.checked = true;
                        el.value = true;
                        el.disabled = true;
                    }
                }

                // log('after trust processing total = '+total);
                if (total > 0) {
                    wizard.setCost('trust', parseFloat(total));
                }
            });
        }
        // task 24
        
        var yahrzeit = wizard.getCurrentField('yahrzeitCalendar');
        var yahrzeitAmount = wizard.getCurrentField('yahrzeitCalendarAmount');

        if (+yahrzeitAmount.value > 0)
            yahrzeit.value = true;
        else
            yahrzeit.value = false;

        render.redrawField(yahrzeit);

        var serviceOrder = wizard.getText('service', 'serviceOrder');
        if (serviceOrder == CNST.siteOnly) {
            wizard.resetField('staff', {
                value : CNST.staffForGravesideItemId
            });
        } else if (serviceOrder.includes(CNST.chapel)) {
            wizard.resetField('staff', {
                value : CNST.staffForChapelItemId
            });
        }
    },
    
    notices : function() {
        var LACcheckbox = document.getElementById('laTimesCourtesyObituary');
        var LATcheckbox = document.getElementById('laTimesNotice');
        var LATlabel = document.getElementById('laTimesNotice_label');
        LATcheckbox.style="visibility:hidden"
        LATlabel.style="visibility:hidden"
        
        LACcheckbox.addEventListener('change', (event) => {
        
     if (event.target.checked) {
       LATcheckbox.checked = true;
       LATcheckbox.value = true;
     } 
     
     else {
       LATcheckbox.checked = false;
       LATcheckbox.value = false;
     }
   })
        
        },

    //  Queries the database to load immediate family members, if there are
    //  any.
    immediateFamily : function() {
        render.hideAllMainFields();
//          var informant = wizard.getValue('service', 'informant');
//          if (informant) {
//              var relationshipId = wizard.table.immediateFamily.reduce(
//              function(acc, relationship) {
//                  return relationship.getValue('linkedClient') == informant ?
//                          relationship.id :
//                              acc;
//              }, '');
//              if (relationshipId) {
//                  var fieldId = 'immediateFamily_'
//                                  + relationshipId
//                                  +'_isInformant';
//                  render.checkCheckbox(fieldId, true);
//              }
//          }
//
//          var nextOfKin = wizard.getValue('decedent', 'nextOfKin');
//          if (nextOfKin) {
//              var relationshipId = wizard.table.immediateFamily.reduce(
//              function(acc, relationship) {
//                  return relationship.getValue('linkedClient') == nextOfKin ?
//                          relationship.id :
//                              acc;
//              }, '');
//              log(relationshipId);
//              if (relationshipId) {
//                  var fieldId = 'immediateFamily_'
//                                  + relationshipId
//                                  +'_isNextOfKin';
//                  render.checkCheckbox(fieldId, true);
//              }
//          }
        wizard.redrawFamilyTable();
//          wizard.loadRelationshipTo(function() {
//              if (wizard.table.immediateFamily.length == 0) {
//                  wizard.loadImmediateFamily();
//              }
//          });
    },

    //  Redraws the label field in the subscreen to reflect whether there
    //  was a search performed or not.
    noPropertyFound : function() {
        var label = wizard.getSubField('noPropertyFoundLabel');
        label.text = 'Please search manually, or confirm purchase'
                            +' later.';
        if (wizard.getCurrentFieldValue('decedentHasProperty'))
            label.text = 'No property found. '+ label.text;

        render.redrawSubField(label);
    },

    property : function() {
        var hasProperty = wizard.getCurrentFieldValue('decedentHasProperty');
        if (hasProperty !== false) {
            wizard.resetField('decedentHasProperty', {
                text : 'T',
                value : true
            });
        }

        var cemetery = wizard.getFieldText('property', 'cemetery');
//          var hasProperty = wizard.getCurrentField('decedentHasProperty');
        var intermentSpace = wizard.getCurrentFieldValue('intermentSpace');
        if (intermentSpace && intermentSpace != CNST.toBeDecided) {
            wizard.resetField('decedentHasProperty', {
                text : 'T',
                value : true
            });
//              hasProperty.text = 'T';
//              hasProperty.value = true;
//              render.redrawField(hasProperty);
//          } else {
//              wizard.resetField('decedentHasProperty', {
//                  text : 'F',
//                  value : false
//              });
        } else if (cemetery == 'Outside') {
            // Load outside cemetery and save it to the cemetery name field
            debugger
        }
    },

    property2 : function() {
        wizard.buildSubscreen('noPropertyFound');
    },

    serviceScheduling : function() {
        // wizard.resetField('scheduleMonths', { text : '', value : '' });
        // wizard.resetField('scheduleDate', { text : '', value : '' });

        // var noService = wizard.getCurrentFieldValue('noService');
        // var scheduleToBeDetermined = wizard.getCurrentFieldValue('scheduleToBeDetermined');

        // render.hideAllMainFields();
        // var noService = wizard.getCurrentFieldValue('noService');
        // if (noService !== true) {
        //     wizard.checkTimeSlots(function(data) {
        //         if (data.success) {
        //             wizard.flags.reservedTimeSlot = data.result.id;
        //             wizard.showAlreadyScheduled(data.result);
        //         } else {
        //             render.showAllMainFields();
        //             var startDate = new Date();
        //             var endDate = new Date();
        //             endDate.setDate(startDate.getDate() + CNST.defaultDaySpan);
        //             wizard.loadTimeSlots(startDate, endDate);
        //         }
        //     });
        // } else {
        //     wizard.showField('noService');
        // }


        var checkTBD = true;

        // always check timeslots first
        wizard.checkTimeSlots(function(data) {
            if (data.success) {
                wizard.flags.reservedTimeSlot = data.result.id;
                wizard.flags.reservedTimeSlotLocation = data.result.getText('timeSlotResource');
                wizard.showAlreadyScheduled(data.result);
                wizard.hideField('scheduleDate');
                wizard.hideField('scheduleToBeDetermined');
                checkTBD = false;
            } else {
                wizard.flags.reservedTimeSlot = undefined
                wizard.flags.reservedTimeSlotLocation = undefined;
                checkTBD = true;
            }
            
            if (checkTBD) {
                var tbd = wizard.checkTimeSlotTBD();
                if (tbd === true) {
                    wizard.flags.reservedTimeSlot = undefined
                    wizard.flags.reservedTimeSlotLocation = undefined;
                    wizard.resetField('scheduleToBeDetermined', { value: true });
                    wizard.hideField('scheduleDate');
                    wizard.hideField('noService');
                    wizard.removeSubscreen();
                }
            }
        });

        wizard.resetField('scheduleDate', { text : '', value : '' });
        
    },


    //  Shows or hides the decedentPresent and haveService fields
    //  according to the stored service type already in the database,
    //  and sets the field values appropriately. This is necessary because
    //  these fields are not in one-to-one correspondence with fields in
    //  the service record, but depend on the logic for the service type
    //  provided by David.
    
    
    
    serviceType : function() {

//         var postNeed = wizard.getCurrentField('postNeed');
//         var postNeedText = wizard.getText('service', 'postNeed');
//         if (postNeedText.toLowerCase() == 'f') {
//             postNeed.value = false;
//             render.redrawField(postNeed);
//         }
        
//         document.getElementsByName('postNeed').forEach(function(e) {
//             e.addEventListener("click", function() {
//                 if(postNeed.value!=false){
//                     intermentType.value=3; //True = Cremation
//                     render.redrawField(intermentType);
//                     wizard.showField('haveService');
//                     wizard.hideField('decedentPresent');
//                 }
//                 else {
//                     intermentType.value=2; //False = No Interment
//                     render.redrawField(intermentType);
//                     wizard.showField('decedentPresent');
//                     wizard.hideField('haveService');
//                 }        
//             });
//         });
        
//         var intermentType = wizard.getCurrentField('intermentType');
//         var haveService = wizard.getCurrentField('haveService');
//         var decedentPresent = wizard.getCurrentField('decedentPresent');
        
            
//         var informant = wizard.getValue('service', 'informant');
//         var informantText = wizard.getText('service', 'informant');
    
// 		 if (informant) {
//            var relationshipId = wizard.table.immediateFamily.reduce(
//            function(acc, relationship) {
//                return relationship.getValue('linkedClient') == informant ?
//                        relationship.id :
//                            acc;
//            }, '');
		 
//   		    var row = wizard.getTableRow('immediateFamily', relationshipId);
// 		    var phoney = row.getValue('phone')
// 		 }
//         var otherContact = wizard.getCurrentField('otherContact');
//         otherContact.value=informantText.substring(informantText.search('  '));
//         render.redrawField(otherContact);
        
//         var otherPhone = wizard.getCurrentField('otherPhone');
//         otherPhone.value=phoney;
//         render.redrawField(otherPhone);
        
//         var iphoney = wizard.getCurrentField('otherPhone');
//         var iphoneyText = wizard.getText('service', phoney);
        
        
//         switch(wizard.getText('service', 'serviceType')) {
//         case CNST.funeral:
//             decedentPresent.value = true;
//             if (intermentType.text != CNST.noInterment)
//                 haveService.value = true;
//             break;
//         case CNST.memorial:
//             if (intermentType.text != CNST.alreadyInterred) {
//                 decedentPresent.value = false;
//                 if (intermentType.text != CNST.noInterment)
//                     haveService.value = true;
//             }
//             break;
//         case CNST.msConvenience:
//             haveService.value = false;
//             break;
//         default:
//         }

//         render.redrawField(decedentPresent);
//         render.redrawField(haveService);

//         switch(intermentType.text) {
//         case CNST.cremation:
//         case CNST.traditional:
//             wizard.showField('haveService');
//             if (haveService.value) {
// //                  wizard.showField('serviceStartTime');
//                 wizard.showField('serviceLocation');
//                 wizard.showField('chapel');
//                 wizard.showField('serviceOrder');
//                 wizard.showField('decedentPresent');
//             }
//             break;
//         case CNST.noInterment:
//             wizard.showField('decedentPresent');
//             break;
//         default:
//             wizard.hideField('decedentPresent', 'haveService');
//         }
    },

    spouseAndParents: function() {
        // hide spouse fields
        var married = wizard.getFieldValue('vitals1', 'maritalStatus');
        if (!!married && married.toString() !== '1') {
            console.log('hiding spouse fields...')
            wizard.hideField('firstName');
            wizard.hideField('middleName');
            wizard.hideField('lastName');
            wizard.hideField('maidenName');
        } 
    },

    //  Shows or hides the 'spouse' and the 'hispanic specify' fields
    //  according to the values in the netsuite records.
    vitals1 : function() {
//          var placeOfBirth = wizard.getCurrentFieldText('placeOfBirth');
        var placeOfBirth = wizard.getCurrentField('placeOfBirth');
        if (!placeOfBirth.text) {
            placeOfBirth.text = CNST.US;
            var usListValue =
                        wizard.getListOptionValue('countryInBook', CNST.US);
            render.makeSelection('placeOfBirth', usListValue);
        } else {
            var placeOfBirthValue = wizard.getListOptionValue(
                                        'countryInBook', placeOfBirth.text);
            render.makeSelection('placeOfBirth', placeOfBirthValue);
        }
        var stateCondition = (placeOfBirth.text == CNST.US);
        showFieldIff('birthState', stateCondition);

        var maritalStatus = wizard.getCurrentFieldText('maritalStatus');
        var spouseCondition = [CNST.married,
                               CNST.widowed,
                               CNST.srdp,
                               CNST.srdpSurv,
                               CNST.marriedWidowed].includes(maritalStatus);
        showFieldIff('spouse', spouseCondition);
       


        var ethnicity = wizard.getCurrentFieldText('ethnicity');
        var specifyCondition = (ethnicity == CNST.hispanic);
        showFieldIff('hispanicSpecify', specifyCondition);

//          if (ethnicity == CNST.hispanic)
//              wizard.showField('hispanicSpecify');
//          else
//              wizard.hideField('hispanicSpecify');
    },

    //  Adjusts the 'ssn' field according to the netsuite database.
    //  ********************************************************************
    //  Needs more work!!!!
    //  ********************************************************************
    workEducation : function() {
//          if (!wizard.getCurrentFieldValue('ssn'))
//              wizard.getCurrentField('ssn').type = 'text';
        var ssn = wizard.getCurrentField('ssn');
        if (!ssn.value) {
            render.handler.clickField.ssn();
        } else {
            ssn.type = 'inline';
            ssn.text = ssn.value.slice(-4);
            for (var i = 0; i < (ssn.value.length - 4); i++) {
                ssn.text = '*'+ ssn.text;
            }
            render.redrawField(ssn);
        }
    },

    website : function() {
        // REQ-038-6
        if (!!wizard.flags.reservedTimeSlotLocation) {
            if (wizard.flags.reservedTimeSlotLocation.indexOf('Graveside') > -1) {
                var webcast = wizard.getCurrentField('websiteWebcast');
                webcast.value = '';
                webcast.text = '';
                render.redrawField(webcast);
                render.disable('websiteWebcast');
            }
        }
    },

    wrapUp : function() {
    	render.disable('runCRE');
      	render.disable('runMap');
    	
        render.disable('eSign');
        var contractId = wizard.getValue('service', 'mortuarySalesContract');
        if (contractId) {
            render.disable('createSalesContract');
            wizard.showLoadingSubscreen('Loading sales contract...');
            wizard.entity.salesOrder.id = contractId;
            wizard.loadEntity('salesOrder', function() {
                var contractNumber =
                                wizard.getValue('salesOrder', 'contractNumber');
                wizard.showLoadingSubscreen('A Contract already exists for '
                                            +'this service: '+ contractNumber);
                render.enable('runCRE');
                render.enable('eSign');
                render.disable('runMap');
            });
        }
    }
},

//  The beforeSection handlers get called when the user first clicks to
//  a new section. Can be used to load some needed data from netsuite.
beforeSection : {

    //  Loads the interment order record into the wizard if the service
    //  record holds a reference to one.
    property : function() {
        var intermentOrderId = wizard.getValue('service', 'intermentOrder');
        if (intermentOrderId)
            wizard.entity.intermentOrder.id = intermentOrderId;
        wizard.loadEntity('intermentOrder');
    }
},

//  The sendToSubscreen handlers are called when the user clicks on a row
//  in the searchResults table, and the chosen row data must be sent to
//  another subscreen, not to a field in the main screen.
//  Sort of a quick hack to deal with user input after clicking on a row.
sendToSubscreen : {

    confirmProperty3 : function(propertySpaceId) {
        wizard.buildSubscreen('loadingProperty3');
        wizard.loadPropertySpace(propertySpaceId, function() {
            wizard.buildSubscreen('confirmProperty3');
        });
    },
    confirmTrust : function(trustId) {
        wizard.buildSubscreen('loadingTrust2');
        wizard.loadTrust(trustId, function() {
            wizard.buildSubscreen('confirmTrust');
        });
    },
    confirmOutsideCemetery: function(id) {
        wizard.showLoadingSubscreen('Loading Outside Cemetery')
        wizard.loadOutsideCemetery(id, function(data) {
            console.log('load outside cemetery', data)
            wizard.buildSubscreen('confirmOutsideCemetery');
            for (const col of data.columns) {
                const field = wizard.getSubField(col.id)
                if (!field) continue
               field.value = col.value
               field.text = col.text
               render.redrawField(field, 'subscreen')
            }
            wizard.entity.outsideCemetery.id = id
        });
    }
}};

//  A small utility function to show a set of fields on the main screen
//  if condition is met, and hide them otherwise.
function showFieldIff(fields, condition) {
    if (condition)
        wizard.showField(fields);
    else
        wizard.hideField(fields);
}

function showSubFieldIff(fields, condition) {
    if (condition)
        wizard.showSubField(fields);
    else
        wizard.hideSubField(fields);
}

//  The Render's handler object also contains 5 main sections:
//  changeField - routines that are called after an onscreen field changes
//  clickField - routines that are called after an onscreen field is clicked
//  mouseIn - routines that are called when the mouse pointer enters a field
//  mouseOut - routines that are called when the mouse pointer exits a field
//  validateField - routines that are called to validate data entered
render.handler = {
changeField : {
    
    // MHI task 35
    cemetery : function () {
        // If Cemetery = Outside, Show Outside Cemetery Name dropdown
        const value = wizard.getCurrentFieldValue('cemetery')
        if (value == 2) {
            wizard.resetField('decedentHasProperty', { mandatory: false, value: '' });
            wizard.hideField('intermentSpace');
            wizard.hideField('decedentHasProperty');
            render.hideSubField('propertyTable');
            render.hideSubField('confirmProperty');
            wizard.showField('cemeteryName');
            
        } else {
            wizard.showField('decedentHasProperty');
            wizard.showField('intermentSpace');
            wizard.hideField('cemeteryName');
            wizard.resetField('decedentHasProperty', { mandatory: true });

            if (value != 1) {
                render.redrawSubField('propertyTable');
                render.redrawSubField('confirmProperty');
            }
        } 
    },

    cemeteryName: function() {
        // const value = wizard.getCurrentFieldValue('cemeteryName')
        // // if (val !== 'ADD_NEW') return
        
        // if (value.length > 2) {
        //     console.log('searchBox field change', searchField.value)
        // }
    },
    
    mailToInformant : function () {
      if (wizard.getCurrentFieldValue('mailToInformant')) {
        wizard.resetField('certifiedCopiesMailTo', {
          text : 'Informant',
          value : 'Informant'
        });
        
      } else {
        wizard.resetField('certifiedCopiesMailTo', {
          text : '',
          value : ''
        });
      } 
    },

    noService : function () {
        var val = wizard.getCurrentFieldValue('noService')
        if (val === true) {
            wizard.clearTimeSlot();
            wizard.resetField('scheduleDate', { text : '', value : '' });
            wizard.removeSubscreen();
            render.hideAllMainFields();
            render.showField('noService');
            wizard.resetField('scheduleToBeDetermined', { value : false });
        } else {
            render.showAllMainFields();
        }
    },
    scheduleToBeDetermined : function () {
        var val = document.getElementById('scheduleToBeDetermined').checked;
        if (val === true || val === 'on') {
            wizard.clearTimeSlot();
            wizard.resetField('scheduleDate', { text : '', value : '' });
            wizard.removeSubscreen();
            render.hideAllMainFields();
            render.showField('scheduleToBeDetermined');
            wizard.resetField('noService', { value : false });
        } else {
            render.showAllMainFields();
        }
    },

    // MHI task 35
    
    basicMortuaryServices : function() {
        if (wizard.getCurrentFieldValue('basicMortuaryServices'))
            var cost = wizard.getPrice('basicMortuaryServices');
        else
            var cost = 0;
        wizard.setCost('basicMortuaryServices', cost);
    },

    casket : function() {
        // var postNeed = wizard.getCurrentFieldValue('postNeed');
        // var postNeedText = wizard.getText('service', 'postNeed');
        
        // if (postNeedText.toLowerCase() == 'f') {
        //     postNeed.value = false;
        // }

        var groupFlag = wizard.flags.itemGroup;
        if (!!groupFlag && groupFlag !== '') {
            var fld = document.getElementById('casket');
            if (!!fld) {
                fld.disabled = true;
            }
            return;
        }
        
        var casket = wizard.getCurrentFieldValue('casket');
        if (casket) {
            var text = wizard.getListOptionText('casket', casket);
            var cost = lib.extractDollars(text);
        } else {
            var cost = 0;
        }
        wizard.setCost('casket', cost);
        
        // if(postNeed.value != false){
        //     //wizard.hideField('casketInChapelAfter','casketInChapelPrior','casketSize','personToMakeId','authorizedBy','embalming');
        //      wizard.hideField('casketInChapelAfter','casketInChapelPrior','casketSize','personToMakeId','authorizedBy');
        // }
            
     
    },

    certifiedCopiesAmount : function() {
//          var hours = Number(wizard.getCurrentFieldValue('shmiraHours'));
        var n = +wizard.getCurrentFieldValue('certifiedCopiesAmount');
        var price = +wizard.prices.certifiedCopiesAmount.substring(4);
        wizard.resetField('certifiedCopiesTotalCost', {
            text : '$'+ n * price,
            value : n * price
        });
        wizard.setCost('certifiedCopies', n * price);
    },

    countryInBook : function() {
        var screen = wizard.getCurrentScreen();
        if (screen.id == 'immediateFamily') {
            var country = wizard.getSubFieldValue('countryInBook');
            showSubFieldIff('stateDropDown', country == 'US');
            showSubFieldIff('stateText', country != 'US');
        } else {
            var country = wizard.getCurrentFieldValue('countryInBook');
            showFieldIff('stateDropDown', country == 'US');
            showFieldIff('stateText', country != 'US');
        }
    },

    //
    decedentHasProperty : function() {
        var hasProperty = wizard.getCurrentField('decedentHasProperty');
//          log('hasProperty', hasProperty.value === false);
//          if (wizard.getCurrentFieldValue('decedentHasProperty')) {
        if (hasProperty.value === true) {
//              wizard.removeSubscreen();
            // wizard.buildSubscreen('noPropertyFound');
            // wizard.showField('intermentSpace', 'checkForProperty');
            
            wizard.buildSubscreen('loadingProperty1');
            wizard.checkForProperty(function() {
                if (wizard.table.propertySpace.length != 0) {
                    wizard.buildSubscreen('confirmProperty1');
                } else {
                    wizard.buildSubscreen('loadingProperty2');
                    wizard.checkForSecondaryProperty(function() {
                        if (wizard.table.propertySpace.length != 0)
                            wizard.buildSubscreen('confirmProperty2');
                        else
                            wizard.buildSubscreen('noPropertyFound');
                    });
                }
            });
        } else if (hasProperty.value === false) {
            wizard.removeSubscreen();
//              wizard.buildSubscreen('noPropertyFound');
            wizard.resetField('intermentSpace', {
                text : CNST.toBePurchased,
                value : CNST.toBeDecided
            });
            wizard.showField('intermentSpace');
            // wizard.hideField('checkForProperty');
        }
    },

    // OLD method
    // MHI - fix for issue #4. default trust if trust is used after reopening SAW
    OLDdecedentHasTrust : function () {
        var hasTrust = wizard.getCurrentField('decedentHasTrust');
        wizard.checkForTrust(function () { // load trust data from the db
            if (wizard.table.trust.length != 0 && !wizard.getCurrentFieldValue('trust')) { // if there is a trust table
                var trustTable = null;
                wizard.table.trust.reduce(function (acc, row) {
                    if (row.getValue('designatedBeneficiary') == wizard.getId('decedent')) { // find the trust for the decedent
                        trustTable = row;
                    }
                }, null);
                if (trustTable) { // if trust is found for decedent
                    var trustName = trustTable.getValue('trustId');
                    if (trustName) { // if there is a trust id
                        wizard.showField('trust');
                        wizard.buildSubscreen('noTrustFound');
                        wizard.showField('trust', 'checkForTrust');
                        wizard.resetField('trust', { text: trustName, value: trustTable.id });
                        wizard.resetField('decedentHasTrust', { value: true });
                        //wizard.hideField('checkForTrust');
                    }
                } else { // if no trust is found
                    if (hasTrust.value === true) { // if the ui is indicating that there is a trust
                        //wizard.removeSubscreen();
                        wizard.buildSubscreen('noTrustFound'); // MHI task 35 remove
                        var trust = wizard.getCurrentFieldValue('trust');
                        if (trust == CNST.doesNotExist) { // this statement is not valid as CNST.doesNotExist is commented out
                            wizard.resetField('trust', { text: '', value: '' });
                        }
                        wizard.showField('trust', 'checkForTrust');
                    } else if (hasTrust.value === false) { // if the ui is indicating that there is NOT a trust
                        wizard.removeSubscreen();
                        //wizard.buildSubscreen('noTrustFound');
                        wizard.resetField('trust', {
                            mandatory: false,
                            text: CNST.noTrust,
                            value: CNST.doesNotExist
                        });
                        wizard.showField('trust');
                        wizard.hideField('checkForTrust');
                    }
                }

            } else { // if there is no trust table
                //if (wizard.getCurrentFieldValue('decedentHasTrust')) {
                if (hasTrust.value === true) { // if the ui is indicating that there is a trust
                    //wizard.removeSubscreen();
                    wizard.buildSubscreen('noTrustFound');// MHI task 35 remove
                    var trust = wizard.getCurrentFieldValue('trust');
                    if (trust == CNST.doesNotExist) {
                        wizard.resetField('trust', {
                            text: '',
                            value: ''
                        });
                    }
                    wizard.showField('trust', 'checkForTrust');
                } else if (hasTrust.value === false) { // if the ui is indicating that there is NOT a trust
                    wizard.removeSubscreen();
                    //wizard.buildSubscreen('noTrustFound');
                    wizard.resetField('trust', {
                        mandatory: false,
                        text: CNST.noTrust,
                        value: CNST.doesNotExist
                    });
                    wizard.showField('trust');
                    wizard.hideField('checkForTrust');
                }
            }

        });
        //}
    },

    decedentHasTrust : function() {
        var hasTrust = wizard.getCurrentField('decedentHasTrust');
        var hasTrustValue = hasTrust.value;
        var trust = wizard.getCurrentFieldValue('trust');

        // callback function
        function checkForTrustCallback () {
            log('trust data', wizard.table.trust);
            var trustTable = null;

            wizard.table.trust.reduce(function (_, row) {
                // find the trust for the decedent
                if (row.getValue('designatedBeneficiary') == wizard.getId('decedent')) {
                    trustTable = row;
                }
            }, null);

            // if trust is found for decedent
            if (trustTable) {
                var trustName = trustTable.getValue('trustId');
                if (trustName) { // if there is a trust id
                    log('trust found', trustName);
                    wizard.showField('trust');
                    wizard.buildSubscreen('noTrustFound');
                    wizard.resetField('trust', { text: trustName, value: trustTable.id });
                    wizard.resetField('decedentHasTrust', { value: true });
                }
            } else { // if NO trust is found for decedent
                wizard.buildSubscreen('noTrustFound');
            }
        }

        // if the ui indicates undefined for hasTrust, check for one
        if (hasTrustValue === '' || hasTrustValue === null || hasTrustValue === undefined) {
            // load trust data from the db
            wizard.checkForTrust(checkForTrustCallback);
        }
        // if the ui indicates No Trust, exit
        else if (hasTrustValue === false) {
            wizard.removeSubscreen();
            wizard.showField('trust');
            wizard.resetField('trust', { mandatory: false, text: CNST.noTrust, value: '' });
            wizard.hideField('secondLineInterestText');
        }
        else if (hasTrustValue === true) {
            wizard.buildSubscreen('noTrustFound');
            if (trust == '') {
                wizard.resetField('trust', { text: '', value: '' });
                wizard.hideField('trust');
                wizard.hideField('secondLineInterestText');
            }
            wizard.checkForTrust(checkForTrustCallback);
        }
    },

    documentation : function() {
        if (wizard.getCurrentFieldValue('documentation'))
            var cost = wizard.getPrice('documentation');
        else
            var cost = 0;
        wizard.setCost('documentation', cost);
    },

    donationInLieu : function() {
        var fields = [
            'prefersDonationsTo',
            'charityAddress',
            'noticeInObit',
            'forPBXOnly',
            'notes',
//              'flowersAcceptable'
        ];
        var condition = wizard.getCurrentFieldValue('donationInLieu');
        showFieldIff(fields, condition);
    },
    embalming : function() {
        var condition = (wizard.getCurrentFieldText('embalming') == 'Yes');
        showFieldIff('authorizedBy', condition);
    },
    ethnicity : function() {
        var ethnicity = wizard.getCurrentFieldText('ethnicity');

        var condition = (ethnicity == CNST.hispanic);
//          render.checkCheckbox('hispanic', condition);
//          showFieldIff('hispanic', condition);
        showFieldIff('hispanicSpecify', condition);
    },
    flag : function() {
        var condition = wizard.getCurrentFieldValue('flag');
        showFieldIff('flagDescription', condition);
    },
    flowerDisplay : function() {
        var fields = [
            'flowersProvidedBy',
            'arrangementNo',
            'priceEstimate',
            'descriptionNotes'
        ];
        var condition = wizard.getCurrentFieldValue('flowerDisplay');
        showFieldIff(fields, condition);
        if (condition)
            render.handler.changeField.flowersProvidedBy();
        else
            wizard.setCost('flowers', 0);
    },

    flowersProvidedBy : function() {
        console.log(arrangementNo, priceEstimate, descriptionNotes)
        if (wizard.getCurrentFieldText('flowersProvidedBy') == CNST.MSMP) {
            var cost = +wizard.getCurrentFieldValue('priceEstimate');
            wizard.resetField('arrangementNo', { mandatory: true });
            wizard.resetField('priceEstimate', { mandatory: true });
            wizard.resetField('descriptionNotes', { mandatory: true });
        } else {
            var cost = 0;
            wizard.resetField('arrangementNo', { mandatory: false });
            wizard.resetField('priceEstimate', { mandatory: false });
            wizard.resetField('descriptionNotes', { mandatory: false });
        }
        wizard.setCost('flowers', cost);
    },

    haveService : function() {
        var fields = [
//              'serviceStartTime',
            'serviceLocation',
            'chapel',
            'serviceOrder',
////                'decedentPresent'
        ];
        var scheduleCondition = wizard.isFieldVisible('haveService')
                        && wizard.getCurrentFieldValue('haveService');
////            showFieldIff('decedentPresent', condition);
        if (!scheduleCondition) {
            wizard.resetField('serviceLocation', {
                text : '',
                value : ''
            });
            wizard.resetField('chapel', {
                text : '',
                value : ''
            });
            wizard.resetField('serviceOrder', {
                text : '',
                value : ''
            });
        }
        showFieldIff(fields, scheduleCondition);

        var decedentPresentCondition = scheduleCondition
        || wizard.getCurrentFieldText('intermentType') == CNST.noInterment;
//          var decedentPresentCondition =
//              (wizard.isFieldVisible('haveService')
//                  && wizard.getCurrentFieldValue('haveService'))
//              || (wizard.getCurrentFieldText('intermentType')
//                      == CNST.noInterment);
        if (!decedentPresentCondition) {
            wizard.resetField('decedentPresent', {
                text : '',
                value :''
            });
        }
        showFieldIff('decedentPresent', decedentPresentCondition);
    },
//      hispanic : function() {
//          var condition = wizard.getCurrentFieldValue('hispanic');
//          showFieldIff('hispanicSpecify', condition);
//      },

    hearse : function() {
        if (wizard.getCurrentFieldValue('hearse'))
            var cost = wizard.getPrice('hearse');
        else
            var cost = 0;
        wizard.setCost('hearse', cost);
    },

    
    honorariumToBeConveyedBy : function() {
        var cost = 0;
        if (wizard.getCurrentFieldText('honorariumToBeConveyedBy') == CNST.MSMP) {
            cost = wizard.getPrice('honorarium');
        }
        wizard.resetField('honorariumAmount', { text: cost.toString(), value: cost });
        wizard.setCost('honorarium', cost);
    },

//  immediateFamily : function() {
//          var rowElement = this.parentElement.parentElement;
//          render.handler.clickField.immediateFamily.call(rowElement);
//  },

    intermentType : function() {
        var intermentType = wizard.getCurrentFieldText('intermentType');

        var haveServiceCondition = ['Traditional', 'Cremation']
                                    .includes(intermentType);
        if (!haveServiceCondition) {
            wizard.resetField('haveService', {
                text : '',
                value : ''
            });
        }
        showFieldIff('haveService', haveServiceCondition);

        var fields = [
//              'serviceStartTime',
            'serviceLocation',
            'chapel',
            'serviceOrder'
        ];
        var serviceScheduleCondition = wizard.isFieldVisible('haveService')
                            && wizard.getCurrentFieldValue('haveService');
        if (!serviceScheduleCondition) {
            wizard.resetField('serviceLocation', {
                text : '',
                value : ''
            });
            wizard.resetField('chapel', {
                text : '',
                value : ''
            });
            wizard.resetField('serviceOrder', {
                text : '',
                value : ''
            });
        }
        showFieldIff(fields, serviceScheduleCondition);

        var decedentPresentCondition =
            (intermentType == CNST.noInterment) || serviceScheduleCondition;
//              || (wizard.isFieldVisible('haveService')
//                  && wizard.getCurrentFieldValue('haveService'));
        if (!decedentPresentCondition) {
            wizard.resetField('decedentPresent', {
                text : '',
                value : ''
            });
        }
        showFieldIff('decedentPresent', decedentPresentCondition);
    },
    location : function() {
        var condition =
            (wizard.getCurrentFieldText('location') == CNST.home);
        showFieldIff('homeOf', condition);
    },
    maritalStatus : function() {
        var condition = [CNST.married,
                         CNST.widowed,
                         CNST.srdp,
                         CNST.srdpSurv,
                         CNST.marriedWidowed]
                    .includes(wizard.getCurrentFieldText('maritalStatus'));
        showFieldIff('spouse', condition);
        if (!condition) {
            wizard.resetField('spouse', {
                text : '',
                value : ''
            });
        }
    },
    memorialCandle : function() {
        var fields = 'memorialCandleAmount';
        var condition = wizard.getCurrentFieldValue('memorialCandle');
        showFieldIff(fields, condition);
    },
    minyanKit : function() {
        var fields = 'minyanKitAmount';
        var condition = wizard.getCurrentFieldValue('minyanKit');
        showFieldIff(fields, condition);
    },

    openingClosing : function() {
        var openingClosing = wizard.getCurrentFieldValue('openingClosing');
        if (openingClosing) {
            var text =
                wizard.getListOptionText('openingClosing', openingClosing);
            var cost = lib.extractDollars(text);
        } else {
            var cost = 0;
        }
        wizard.setCost('openingClosing', cost);
    },

    park : function() {
        var serviceLocation = wizard.getCurrentField('serviceLocation');
        switch(wizard.getCurrentFieldText('park')) {
        case 'Los Angeles':
            serviceLocation.list = 'serviceLocationHH';
            break;
        case 'Simi Valley':
            serviceLocation.list = 'serviceLocationSV';
            break;
        default:
        }
        render.redrawField(serviceLocation);
    },
    placeOfBirth : function() {
        var placeOfBirth = wizard.getCurrentFieldText('placeOfBirth');
        var $placeOfBirth = document.querySelector('#placeOfBirth');
        // showFieldIff('birthState', placeOfBirth == CNST.US);
        showFieldIff('birthState', $placeOfBirth[$placeOfBirth.selectedIndex].innerText == CNST.US);
    },

    priceEstimate : function() {
        if (wizard.getCurrentFieldText('flowersProvidedBy') == CNST.MSMP)
            var cost = +wizard.getCurrentFieldValue('priceEstimate');
        else
            var cost = 0;
        wizard.setCost('flowers', cost);
    },

    receiveAfter : function() {
        var fields = ['location', 'address'];
        var condition = wizard.getCurrentFieldValue('receiveAfter');
        showFieldIff(fields, condition);
    },
    // scheduleMonths : function() {
    //     var months = +wizard.getCurrentFieldValue('scheduleMonths');
    //     if (months) {
    //         wizard.resetField('scheduleDate', {
    //             text : '',
    //             value : ''
    //         });
    //         var startDate = new Date();
    //         var endDate = new Date();
    //         endDate.setMonth(startDate.getMonth() + months);
    //         wizard.loadTimeSlots(startDate, endDate);
    //     }
    // },
    scheduleDate : function() {
        var dateStr = document.getElementById('scheduleDate').value;
        // var date = wizard.getCurrentField('scheduleDate');
        // var dateStr = wizard.getCurrentFieldText('scheduleDate');
        if (dateStr) {
            var now = new Date();
            var split = dateStr.split('-')
            var date = lib.extractDate(split[1]+'/'+split[2]+'/'+split[0]);
            log('scheduleDate', date, now);

            var dt_yyyymmdd = parseInt(date.getFullYear().toString() + (date.getMonth()+1).toString().padStart(2, '0') + date.getDate().toString().padStart(2, '0'));
            var now_yyyymmdd = parseInt(now.getFullYear().toString() + (now.getMonth()+1).toString().padStart(2, '0') + now.getDate().toString().padStart(2, '0'));
            
            log('compare', dt_yyyymmdd >= now_yyyymmdd);

            //wizard.resetField('scheduleMonths', { text : '', value : '' });

            if (dt_yyyymmdd >= now_yyyymmdd)
                wizard.loadTimeSlots(date, date);
            else
                wizard.showLoadingSubscreen('Cannot choose a date in the past');
        }
    },
    searchBox : function() {
        var now = Date.now();
        var searchField = wizard.getSubField('searchBox');
        var searchResultsField = wizard.getSubField('searchResults');
        if (searchField.value.length > 2) {
//              var keywords = searchField.prefix +': '+ searchField.value;
            if (!wizard.flags.latestSearch)
                render.showLoading('subscreen', searchResultsField);
            wizard.flags.latestSearch = now;
//              wizard.loadSearch(keywords, searchField.filter, function() {
            wizard.loadSearch(searchField, function() {
                if (wizard.flags.latestSearch == now) {
                    wizard.flags.latestSearch = undefined;
                    render.redrawSubField(searchResultsField);
                }
            });
        } else {
            wizard.clearSearch();
            render.redrawSubField(searchResultsField);
        }
    },
    searchBoxFamily : function() {
        var now = Date.now();
        var searchField = wizard.getSubField('searchBoxFamily');
        var searchResultsField = wizard.getSubField('searchResultsFamily');
        if (searchField.value.length > 2) {
            console.log('searchBox field change', searchField.value)
//              var keywords = searchField.prefix +': '+ searchField.value;
            if (!wizard.flags.latestSearch)
                render.showLoading('subscreen', searchResultsField);
            wizard.flags.latestSearch = now;
//              wizard.loadSearch(keywords, searchField.filter, function() {
            wizard.loadSearchFamily(searchField, function() {
                if (wizard.flags.latestSearch == now) {
                    wizard.flags.latestSearch = undefined;
                    render.redrawSubField(searchResultsField);
                }
            });
        } else {
            wizard.clearSearch();
            render.redrawSubField(searchResultsField);
        }
    },
    shmira : function() {
        var fields = ['shmiraHours', 'shmiraTotalPrice'];
        var condition = wizard.getCurrentFieldValue('shmira');
        showFieldIff(fields, condition);
        var hours = wizard.getCurrentFieldValue('shmiraHours');
        if (condition && !hours) {
            wizard.resetField('shmiraHours', {
                value : '12'
            });
            render.handler.changeField.shmiraHours();
        } else if (condition) {
            var total = wizard.getCurrentFieldText('shmiraTotalPrice');
            wizard.setCost('shmira', lib.extractDollars(total));
        } else {
            wizard.setCost('shmira', 0);
        }
    },
    shmiraHours : function() {
        var hours = Number(wizard.getCurrentFieldValue('shmiraHours'));
//          log(wizard.prices.shmira.substring(4));
        var price = Number(wizard.prices.shmira.substring(4));
        wizard.resetField('shmiraTotalPrice', {
            text : '$'+ hours * price
        });
        wizard.setCost('shmira', hours * price);
//          var totalPrice = hours * price;
//          var totalPriceField = wizard.getCurrentField('shmiraTotalPrice');
//          totalPriceField.text = totalPrice;
//          render.redrawField(totalPriceField);
    },
    slumberRoomVisitation : function() {
        var fields = ['private'];
        if (wizard.getText('service', 'intermentType') == CNST.traditional)
            fields.push('slumberCasket');
        var condition =
                    wizard.getCurrentFieldValue('slumberRoomVisitation');
        showFieldIff(fields, condition);
    },

    staff : function() {
        var staff = wizard.getCurrentFieldValue('staff');
        if (staff) {
            var text = wizard.getListOptionText('staff', staff);
            var cost = lib.extractDollars(text);
        } else {
            var cost = 0;
        }
        wizard.setCost('staff', cost);
    },

    standardPreparation : function() {
        if (wizard.getCurrentFieldValue('standardPreparation'))
            var cost = wizard.getPrice('standardPreparation');
        else
            var cost = 0;
        wizard.setCost('standardPreparation', cost);
    },

    cremation : function() {
        var cost = 0;
        if (wizard.getCurrentFieldValue('cremation')) {
            var group = wizard.getCurrentFieldValue('itemGroup');
            if (group === '') {
                wizard.showField('cremationFee');
                wizard.resetField('cremationFee', { value: 0, text: 0 });
            }
            cost = wizard.getPrice('cremation');
        } else {
            wizard.hideField('cremationFee');
        }
        wizard.setCost('cremation', cost);
    },

    cremationFee: function() {
        var val = wizard.getCurrentFieldValue('cremationFee');
        var cost = !!val && parseFloat(val) || 0;
        if (!!cost) {
            wizard.setCost('cremation', cost);
        }
    },

    cremationReceptacle : function() {
        if (wizard.getCurrentFieldValue('cremationReceptacle'))
            var cost = wizard.getPrice('cremationReceptacle');
        else
            var cost = 0;
        wizard.setCost('cremationReceptacle', cost);
    },
    registerBook : function() {
        if (wizard.getCurrentFieldValue('registerBook'))
            var cost = wizard.getPrice('registerBook');
        else
            var cost = 0;
        wizard.setCost('registerBook', cost);
    },
    funeralFlowers : function() {
        if (wizard.getCurrentFieldValue('funeralFlowers'))
            var cost = wizard.getPrice('funeralFlowers');
        else
            var cost = 0;
        wizard.setCost('funeralFlowers', cost);
    },


    tachrichim : function() {
        var fields = 'tachrichimMaterial';
        var condition = wizard.getCurrentFieldValue('tachrichim');
        showFieldIff(fields, condition);
    },

    tachrichimCotton : function() {
        if (wizard.getCurrentFieldValue('tachrichimCotton'))
            var cost = wizard.getPrice('tachrichimCotton');
        else
            var cost = 0;
        wizard.setCost('tachrichimCotton', cost);
    },

    tachrichimLinen : function() {
        if (wizard.getCurrentFieldValue('tachrichimLinen'))
            var cost = wizard.getPrice('tachrichimLinen');
        else
            var cost = 0;
        wizard.setCost('tachrichimLinen', cost);
    },

    tahara : function() {
        if (wizard.getCurrentFieldValue('tahara'))
            var cost = wizard.getPrice('tahara');
        else
            var cost = 0;
        wizard.setCost('tahara', cost);
    },

    tallit : function() {
        if (wizard.getCurrentFieldValue('tallit'))
            var cost = wizard.getPrice('tallit');
        else
            var cost = 0;
        wizard.setCost('tallit', cost);
    },

    timeSlot : function(e) {
        var timeSlotId = e.target.id.split('_').pop();
        wizard.loadNearServices(timeSlotId);
    },

    transferOfRemains : function() {
        var transfer = wizard.getCurrentFieldValue('transferOfRemains');
        if (transfer) {
            var text = wizard.getListOptionText('transferOfRemains', transfer);
            var cost = lib.extractDollars(text);
        } else {
            var cost = 0;
        }
        wizard.setCost('transferOfRemains', cost);
    },
    
    // task 24
    itemGroup : function() {
        var itemGroup = wizard.getCurrentFieldValue('itemGroup');
        wizard.flags.itemGroup = itemGroup;

        // reset existing fields
        var transferOfRemains = document.getElementById('transferOfRemains');
        if (!!transferOfRemains) {
            transferOfRemains.value = '';
            transferOfRemains.disabled = false;
            wizard.getCurrentField('transferOfRemains').value = '';
            wizard.setCost('transferOfRemains', 0);
        }
        var checkedCheckboxes = document.querySelectorAll('input[type="checkbox"]:checked');
        for (var i=0; i<checkedCheckboxes.length; i++) {
            var checkbox = checkedCheckboxes[i];
            checkbox.value = false;
            checkbox.checked = false;
            checkbox.disabled = false;
            wizard.getCurrentField(checkbox.id).value = false;
            wizard.setCost(checkbox.id, 0);
        }

        function changeFieldLabels(domFieldIds) {
            // console.log('changeFieldLabels', domFieldIds)
            var data = wizard.getGroupPackageData(itemGroup);
            var labelFields = document.querySelectorAll("div[id*='_label']");
            for (const labelField of labelFields) {
                var labelNode = labelField.childNodes?.[0]
                if (!labelNode) continue
                if (!labelField.dataset.defaultLabel) {
                    labelField.dataset.defaultLabel = labelNode.innerText
                }
                // reset the label if it's not the default value
                if (labelNode.innerText !== labelField.dataset.defaultLabel) {
                    labelNode.innerText = labelField.dataset.defaultLabel
                }
                // change the label node
                var fieldId = labelField.id.split('_label')[0]
                if (!domFieldIds.includes(fieldId)) continue
                // console.log('set label', fieldId)
                for (const memberObj of data?.members) {
                    if (!memberObj.hasOwnProperty('item')) continue
                    if (memberObj.item.id !== fieldId) continue
                    if (!memberObj.item.rateFormatted) continue
                    var prefix = labelNode.innerText.split(' - $')[0]
                    labelNode.innerText = prefix + memberObj.item.rateFormatted
                    break
                }
            }
        }

        // if itemGroup does not have a value, set the cost to 0 and exit
        if (!itemGroup) {
            wizard.setCost('itemGroup', 0);
            changeFieldLabels([]);
            return;
        }

        var cost = 0;
        var data = wizard.getGroupPackageData(itemGroup);
        if (!!data) {
            cost = data.groupPrice;
            var labelFieldIds = [];

            // check screen checkboxes
            for (var i=0; i<data.members.length; i++) {
                var member = data.members[i]
                if (!member || !member.item) continue;

                // handle transferOfRemains field
                if (~member.item.id.indexOf('transferOfRemains')) {
                    member.item.id = 'transferOfRemains';
                }

                var field = wizard.getCurrentField(member.item.id);

                if (member.item.id == "websiteWebcast") {
                    // var service = wizard.entity.service;
                    // if (!!service) {
                    //     for (var c=0; c<service.columns.length; c++) {
                    //         if (service.columns[c].id !== 'websiteWebcast') continue;
                    //         service.columns[c].value = 'Yes';
                    //         service.columns[c].text = 'Yes';
                    //     }
                    //     var col = service.columns.find(function(col) { return col.id === 'websiteWebcast' });
                    //     var foo = true;
                    // }
                    // var baz = true;
                }

                if (member.item.id == "casket") {
                    var service = wizard.entity.service;
                    if (!!service) {
                        for (var c=0; c<service.columns.length; c++) {
                            if (service.columns[c].id !== 'casket') continue;
                            service.columns[c].value = member.item.internalid;
                        }
                    }
                }

                if (!field) continue;

                var domField = document.getElementById(field.id)
                labelFieldIds.push(field.id)

                switch (field.type) {
                    case 'checkbox':
                        field.value = true;
                        if (!!domField) {
                            domField.checked = true;
                            domField.disabled = true;
                        }
                        break;
                    case 'select':
                        if (field.list == 'yesNo') {
                            field.value = '1'; // yes
                        } else {
                            field.value = member.item.internalid;
                        }
                        if (!!domField) {
                            domField.value = field.value;
                            domField.disabled = true;
                        }
                        break;
                    default:
                        log('field switch defaulted: '+field.id, field);
                }

                log('set field value: '+field.id, field.value);
                
                var labelContainer = document.getElementById(field.id+'_label')
                if (!labelContainer) continue

                if (!labelContainer.dataset.defaultLabel) {
                    labelContainer.dataset.defaultLabel = labelContainer.childNodes[0].innerText
                }
            }

            changeFieldLabels(labelFieldIds);
        }

        wizard.setCost('itemGroup', cost);
  },

    vault : function() {
        if (wizard.getCurrentFieldValue('vault'))
            var cost = wizard.getPrice('vault');
        else
            var cost = 0;
        wizard.setCost('vault', cost);
    },

    websiteWebcast : function() {
        
        var groupFlag = wizard.flags.itemGroup;
        if (!!groupFlag && groupFlag !== '') {
            var fld = document.getElementById('websiteWebcast');
            if (!!fld) {
                fld.disabled = true;
            }
            return;
        }

        var webcast = wizard.getCurrentFieldText('websiteWebcast');
        var fieldLabel = document.getElementById('websiteWebcast_label');
        if (webcast == CNST.yes || webcast == 'Chapel') {
            var cost = wizard.getPrice('websiteWebcast');
        } else if (webcast == 'Graveside') {
            var cost = wizard.getPrice('websiteWebcastGraveside');
        } else if (webcast == 'Both') {
            var cost = wizard.getPrice('websiteWebcastBoth');
        } else {
            var cost = 0;
        }
        var label = fieldLabel.getElementsByTagName('label')[0];
        debugger
        label.innerText = label.innerText.split('$')[0] + '$' + cost;
        wizard.setCost('websiteWebcast', cost);
    },

    yahrzeitCalendar : function() {
        var fields = 'yahrzeitCalendarAmount';
        var condition = wizard.getCurrentFieldValue('yahrzeitCalendar');
        showFieldIff(fields, condition);
    },
},
clickField : {
    addFamilyMember : function () {
        wizard.flags.addingFamilyMember = true;
        wizard.unselectFamily();
        wizard.redrawFamilyTable();
//          render.showAllMainFields();
        render.hideAllMainFields();
        wizard.buildSubscreen('createSearchMember');
//          wizard.hideField('deleteFamilyMember');
    },
    addNewClient : function() {
        wizard.showSubField('firstName', 'middleName', 'lastName', 
                                // 'dateOfBirth', 'address', 'phone', 'email',
                                'createClient');
        wizard.hideSubField('searchBox', 'addNewClient', 'searchResults');
    },
    addNewCemetery : function() {
        wizard.showSubField('cemeteryCompanyName', 'phone', 'addressLine1', 'addressLine2', 
            'cityInBook', 'stateDropDown', 'zip', 'countryInBook', 'createCemetery');
        wizard.hideSubField('searchBox', 'addNewCemetery', 'searchResults');
    },
    altName : function() {
        wizard.buildSubscreen('enterName');
    },
    applyChanges : function() {
        var tableField = wizard.getHeaderField('immediateFamily');
        var screen = wizard.getCurrentScreen();
//          log('screen', screen);
        wizard.showLoadingSubscreen('Saving changes...');
        if (tableField.selection) {
            var relationId = tableField.selection;
            var row = wizard.getTableRow('immediateFamily', relationId);
            screen.fields.forEach(function(field) {
                switch(field.id) {
                case 'additionalInfo':
                    if (field.value != row.getValue(field.id))
                        wizard.saveToRelationship(relationId,
                                            'additionalInfo', field.value);
                    break;
                case 'relationToPrimaryClient':
                    if (field.value != row.getValue(field.id)) {
                        wizard.saveToRelationship(relationId,
                                    'relationToPrimaryClient', field.value);
                        var relationshipType = wizard.getRelationshipType(
                                                field.value);
                        wizard.saveToRelationship(relationId,
                                    'relationshipType', relationshipType);
                    }
                    break;
                case 'phone':
                	
                case 'email':
                    if (field.value != row.getValue(field.id))
                        wizard.pushToSave('linkedClient', field.id,
                                                field.value);
                    break;
                case 'dateOfBirth':
                    var val = wizard.getCurrentFieldValue(field.id);
                    var valFmt = null;
                    if (val !== '') {
                        var split = val.split('-')
                        valFmt = split[1]+'/'+split[2]+'/'+split[0];
                    }
                    log('dateOfBirth Save', val, valFmt, row.getValue(field.id))
                    if (valFmt != row.getValue(field.id)) {
                        wizard.pushToSave('linkedClient', field.id, val);
                    }
                    break;
                default:
                }
            });
            wizard.saveEntity('linkedClient', 'family', function() {
                wizard.saveRelationship(relationId, function(result) {
                    wizard.reloadRelationship(relationId, function() {
                        wizard.unselectFamily();
                        wizard.redrawFamilyTable();
                    });
                });
            });
        } else {
            // log('create new');
            wizard.flags.addingFamilyMember = false;
            var linkedClientField = wizard.getCurrentField('linkedClient');
            var relationField = wizard.getCurrentField('relationToPrimaryClient');
            var addressField = wizard.getCurrentField('shippingAddress');
            if (!linkedClientField.value) {
                var message = 'Please enter value for "Linked Client"';
                wizard.showLoadingSubscreen(message);
            } else if (!relationField.value) {
                var message = 'Please enter value for "Relationship"';
                wizard.showLoadingSubscreen(message);
//              } else if (!addressField.value) {
//                  var message = 'Please enter value for "Mailing Address"';
//                  wizard.showLoadingSubscreen(message);
            } else {
                wizard.createNewRelationship(function(saveResult) {
                    if (saveResult.success) {
                        wizard.addRelationship(saveResult.id, function() {
                            wizard.unselectFamily();
                            wizard.redrawFamilyTable();
//                              if (wizard.table.immediateFamily.length >= 50)
//                                  wizard.hideHeaderField('addFamilyMember');
                        });
                    } else {
                        wizard.unselectFamily();
                        wizard.redrawFamilyTable();
                    }
                });
            }
        }
    },
    back : function() {
        wizard.moveToPrevScreen();
//          log(wizard);
    },
    cancelSubscreen : function() {
        wizard.removeSubscreen();
        render.showAllMainFields();
        wizard.clearSearch();
        if (wizard.flags.addingFamilyMember) {
            wizard.flags.addingFamilyMember = false;
            render.handler.clickField.cancelChanges();
        }
    },
    cancelChanges : function() {
        wizard.unselectFamily();
        wizard.redrawFamilyTable();
    },
    checkForDeed : function() {
        wizard.buildSubscreen('loadingDeed1');
        wizard.checkForDeed(function() {
            if (wizard.table.deed.length == 0) {
                wizard.buildSubscreen('noDeedFound');
            } else {
                wizard.buildSubscreen('confirmDeed1');
            }
        });
    },
    checkForProperty : function() {
        wizard.buildSubscreen('loadingProperty1');
        wizard.checkForProperty(function() {
            if (wizard.table.propertySpace.length != 0) {
                wizard.buildSubscreen('confirmProperty1');
            } else {
                wizard.buildSubscreen('loadingProperty2');
                wizard.checkForSecondaryProperty(function() {
                    if (wizard.table.propertySpace.length != 0)
                        wizard.buildSubscreen('confirmProperty2');
                    else
                        wizard.buildSubscreen('noPropertyFound');
                });
            }
        });
    },
    checkForTrust : function() {
        wizard.buildSubscreen('loadingTrust');
        wizard.checkForTrust(function() {
            if (wizard.table.trust.length != 0)
                wizard.buildSubscreen('confirmTrust');
            else
                wizard.buildSubscreen('noTrustFound');
        });
    },
    confirmDeed : function() {
        var deedId = wizard.getSubFieldValue('deedTable');
        if (deedId) {
            wizard.resetField('deed', {
                text : deedId,
                value : deedId
            });
            wizard.removeSubscreen();
        }
    },
    confirmProperty : function() {
        var cemetery = wizard.getCurrentFieldValue('cemetery');
        var propertyId = wizard.getSubFieldValue('propertyTable');
        if (propertyId) {
            var property = wizard.getTableRow('propertySpace', propertyId);
            // MHI fix for property check -Issue #6
            var proUnitId= property.getValue('propertyUnit');
            var decedentId = wizard.entity.decedent.id;
            wizard.checkForOwner(function() {
                wizard.isOwned = true; // set to true. no validation needed
                if (wizard.isOwned != true) {
                    alert('This property is not owned by the decedent or relative of the decedent')
                    return
                }

                wizard.resetField('intermentSpace', {
                    text : property.getValue('fullSpaceName'),
                    value : propertyId
                });

                // wizard.showField('purchaser');
                // wizard.showField('purchaserRelationship');
                // wizard.resetField('purchaser', {
                //     text : property.getText('purchaser'),
                //     value : property.getValue('purchaser')
                // });
                

                // If Cemetery = Outside, Hide "Purchaser" and "Relationship to Property Owner"
                // If Cemetery = Outside, Show Outside Cemetery Name dropdown
                if (cemetery !== '2') {
                    wizard.showField('purchaser');
                    wizard.showField('purchaserRelationship');
                    wizard.hideField('cemeteryName');
                    wizard.resetField('purchaser', {
                        text : property.getText('purchaser'),
                        value : property.getValue('purchaser')
                    });
                } else {
                    wizard.hideField('purchaser');
                    wizard.hideField('purchaserRelationship');
                    wizard.showField('cemeteryName');
                    wizard.resetField('purchaser', { text : '', value : '' });
                }

                wizard.removeSubscreen();
          });
            // MHI
            
        }
    },
    confirmTrust : function() {
        var trustId = wizard.getSubFieldValue('trustTable');
        var trust = wizard.getTableRow('trust', trustId);
        var trustName = trust.getValue('trustId');
        var secondLineInterest = trust.getValue('secondLineInterest'); // task 50
        if (trustId) {
            wizard.showField('trust');
            wizard.resetField('trust', { text: trustName, value: trustId });
            wizard.resetField('decedentHasTrust', { value: true });
            // task 50
            if (!secondLineInterest) {
              wizard.showField('secondLineInterestText');
              wizard.resetField('secondLineInterestText', {
                value : '2nd line interest is non-refundable.'
              });
            } else {
              wizard.hideField('secondLineInterestText');
            }
            wizard.removeSubscreen();
        }
    },
    createCemetery: function() {
        var field = wizard.getSubField('createCemetery');
        var cemeteryCompanyName = wizard.getSubFieldValue('cemeteryCompanyName');

        if (!cemeteryCompanyName) {
            return
        }

        var phone = wizard.getSubFieldValue('phone');
        var addressLine1 = wizard.getSubFieldValue('addressLine1');
        var addressLine2 = wizard.getSubFieldValue('addressLine2');
        var cityInBook = wizard.getSubFieldValue('cityInBook');
        var stateDropDown = wizard.getSubFieldValue('stateDropDown');
        var zip = wizard.getSubFieldValue('zip');
        var countryInBook = wizard.getSubFieldValue('countryInBook');

        var message = 'Creating new record for ' + cemeteryCompanyName;
        wizard.showLoadingSubscreen(message); 

        var entityName = field.loadEntity;
        var entity = wizard.entity[entityName];
        entity.id = 'new';
        entity.toSave = [];

        wizard.pushToSave(entityName, 'category', CNST.outsideCemeteryValue);
        wizard.pushToSave(entityName, 'isperson', 'F');
        wizard.pushToSave(entityName, 'cemeteryCompanyName', cemeteryCompanyName);
        if (phone) 
            wizard.pushToSave(entityName, 'phone', phone);
        if (addressLine1) 
            wizard.pushToSave(entityName, 'addressLine1', addressLine1);
        if (addressLine2) 
            wizard.pushToSave(entityName, 'addressLine2', addressLine2);
        if (cityInBook) 
            wizard.pushToSave(entityName, 'cityInBook', cityInBook);
        if (stateDropDown) 
            wizard.pushToSave(entityName, 'stateDropDown', stateDropDown);
        if (zip) 
            wizard.pushToSave(entityName, 'zip', zip);
        if (countryInBook) 
            wizard.pushToSave(entityName, 'countryInBook', countryInBook);
        
        wizard.saveEntity(entityName, wizard.nav.sectionId, null,
            function(id) {
                complete(id);
            });

        function complete(id) {
            wizard.resetField(field.saveTo, {
                text: wizard.getValue(entityName, 'entityId'),
                value: id
            });
            wizard.removeSubscreen();
        }
    },
    createClient : function() {
        var field = wizard.getSubField('createClient');
        var lastName = wizard.getSubFieldValue('lastName');
        if (lastName) {
            var firstName = wizard.getSubFieldValue('firstName');
            var middleName = wizard.getSubFieldValue('middleName');
            // if (wizard.getCurrentScreen().id == 'vitals3') {
            //   var maidenName = wizard.getSubFieldValue('maidenName'); // mhi task 35
            // }
            if (wizard.getCurrentScreen().id == 'vitals1') {
                  var maidenName = wizard.getSubFieldValue('maidenName'); // mhi task 35
            }
            var dateOfBirth = wizard.getSubFieldValue('dateOfBirth');
            // var address = wizard.getSubFieldValue('address');
            var phone = wizard.getSubFieldValue('phone');
            var email = wizard.getSubFieldValue('email');
            var message = 'Creating new record for '
                            + firstName
                            +' '+ middleName
                            +' '+ lastName;
            wizard.showLoadingSubscreen(message);

            var entityName = field.loadEntity;
            var entity = wizard.entity[entityName];
            entity.id = 'new';
            entity.toSave = [];
            if (firstName)
                wizard.pushToSave(entityName, 'firstName', firstName);
                wizard.pushToSave(entityName, 'lastName', lastName);
            if (middleName)
                wizard.pushToSave(entityName, 'middleName', middleName);
            // MHI task 35
            if (maidenName) {
              wizard.pushToSave(entityName, 'maidenName', maidenName);
            }
            if (dateOfBirth)
                wizard.pushToSave(entityName, 'dateOfBirth', dateOfBirth);
            // if (address)
                // wizard.pushToSave(entityName, 'address', address);
            if (phone)
                wizard.pushToSave(entityName, 'phone', phone);
            if (email)
                wizard.pushToSave(entityName, 'email', email);
            if (entityName == 'rabbi') {
                rabbiClergyValue =
                    wizard.getListOptionValue('clientAttributes',
                                            CNST.rabbiClergyText);
                wizard.pushToSave('rabbi', 'category', rabbiClergyValue);
            }

            wizard.saveEntity(entityName, wizard.nav.sectionId, null,
            function(id) {
                if (field.saveTo == 'linkedClient') {
                    var table = wizard.getHeaderField('immediateFamily');
                    var rowId = table.selection;
                    if (rowId) {
                        var row = wizard.getTableRow('immediateFamily',
                                                        rowId);
                        wizard.saveToRelationship(rowId, 'linkedClient',
                                                    id);
                        wizard.saveRelationship(rowId, function() {
                            wizard.reloadRelationship(rowId, function() {
                                wizard.redrawFamilyTable();
                                wizard.toggleFamilySelection(rowId);
                                wizard.toggleFamilySelection(rowId);
                            });
                        });
                    } else {
                        wizard.loadAltName(function(altName) {
                            render.showAllMainFields();
                            wizard.hideField('deleteFamilyMember');
                            wizard.flags.addingFamilyMember = false;
                            wizard.resetField('altName', {
                                text : altName,
                                value : altName
                            });
                            complete(id);
                        });
                    }
                } else {
                    complete(id);
                }
            });

            function complete(id) {
                wizard.resetField(field.saveTo, {
                    text : wizard.getValue(entityName, 'entityId'),
                    value : id
                });
                wizard.table.search = [];
                wizard.removeSubscreen();
            }
        }
    },
    createSalesContract : function() {
        render.disable('createSalesContract');
        render.setColour('wrapUp', 'inform');
        wizard.showLoadingSubscreen('Saving sales contract...');

        if (wizard.getValue('service', 'trust'))
            wizard.useTrust(complete);
        else
            wizard.createSalesContract(complete);

        function complete() {
            var salesOrderId = wizard.getId('salesOrder');
//          var contractType = wizard.getText('salesOrder', 'contractType');
//          var serviceRef = wizard.getValue('salesOrder', 'service');
//          if (contractType == CNST.mortuary && (serviceRef)) {
//
//          }
            wizard.pushToSave('service', 'mortuarySalesContract', salesOrderId);
            wizard.saveEntity('service', 'wrapUp', function() {}, function() {
                wizard.showLoadingSubscreen('Sales contract '
                        + wizard.getValue('salesOrder', 'contractNumber')
                        +' saved');
                render.enable('runCRE');
              	render.enable('runMap');
                render.enable('eSign');
            });
        };
    },
    decedentHasNoTrust : function() {
        wizard.showField('trust');
        wizard.resetField('trust', { text : CNST.noTrust, value : '', mandatory: false });
        wizard.resetField('decedentHasTrust', { value: false });
        wizard.removeSubscreen();
    },
    deleteFamilyMember : function() {
        var tableField = wizard.getHeaderField('immediateFamily');
        if (tableField.selection) {
            wizard.deleteRelationship(tableField.selection, function() {
                wizard.removeRelationship(tableField.selection);
//                  if (wizard.table.immediateFamily.length < 50)
//                      wizard.showHeaderField('addFamilyMember');
                wizard.unselectFamily();
                wizard.redrawFamilyTable();
            });
        } else {
            wizard.unselectFamily();
            wizard.redrawFamilyTable();
        }
    },
    earthOffPerson1 : function() {
        wizard.buildSubscreen('searchClient');
        wizard.flags.earthOffPerson = '1';
        wizard.flags.earthOff = undefined;
        var fldValue = wizard.getField('earthOff','earthOffPerson1').value;
        if (fldValue) {
          wizard.resetField('earthOffPerson1',{text:'Click to search:', value:''})
        }
    },
    earthOff1 : function() {
        wizard.buildSubscreen('searchProperty');
        wizard.flags.earthOffPerson = undefined;
        wizard.flags.earthOff = '1';
        var fldValue = wizard.getField('earthOff','earthOff1').value;
        if (fldValue) {
          wizard.resetField('earthOff1',{ text:'Click to search:', value:'' })
        }
    },
    earthOffPerson2 : function() {
        wizard.buildSubscreen('searchClient');
        wizard.flags.earthOffPerson = '2';
        wizard.flags.earthOff = undefined;
        var fldValue = wizard.getField('earthOff','earthOffPerson2').value;
        if (fldValue) {
          wizard.resetField('earthOffPerson2',{text:'Click to search:', value:''})
        }
    },
    earthOff2 : function() {
        wizard.buildSubscreen('searchProperty');
        wizard.flags.earthOffPerson = undefined;
        wizard.flags.earthOff = '2';
        var fldValue = wizard.getField('earthOff','earthOff2').value;
        if (fldValue) {
          wizard.resetField('earthOff2',{ text:'Click to search:', value:'' })
        }
    },
    earthOffPerson3 : function() {
        wizard.buildSubscreen('searchClient');
        wizard.flags.earthOffPerson = '3';
        wizard.flags.earthOff = undefined;
        var fldValue = wizard.getField('earthOff','earthOffPerson3').value;
        if (fldValue) {
          wizard.resetField('earthOffPerson3',{text:'Click to search:', value:''})
        }
    },
    earthOff3 : function() {
        wizard.buildSubscreen('searchProperty');
        wizard.flags.earthOffPerson = undefined;
        wizard.flags.earthOff = '3';
        var fldValue = wizard.getField('earthOff','earthOff3').value;
        if (fldValue) {
          wizard.resetField('earthOff3',{ text:'Click to search:', value:'' })
        }
    },
    earthOffPerson4 : function() {
        wizard.buildSubscreen('searchClient');
        wizard.flags.earthOffPerson = '4';
        wizard.flags.earthOff = undefined;
        var fldValue = wizard.getField('earthOff','earthOffPerson4').value;
        if (fldValue) {
          wizard.resetField('earthOffPerson4',{text:'Click to search:', value:''})
        }
    },
    earthOff4 : function() {
        wizard.buildSubscreen('searchProperty');
        wizard.flags.earthOffPerson = undefined;
        wizard.flags.earthOff = '4';
        var fldValue = wizard.getField('earthOff','earthOff4').value;
        if (fldValue) {
          wizard.resetField('earthOff4',{ text:'Click to search:', value:'' })
        }
    },
    earthOffPerson5 : function() {
        wizard.buildSubscreen('searchClient');
        wizard.flags.earthOffPerson = '5';
        wizard.flags.earthOff = undefined;
        var fldValue = wizard.getField('earthOff','earthOffPerson5').value;
        if (fldValue) {
          wizard.resetField('earthOffPerson5',{text:'Click to search:', value:''})
        }
    },
    earthOff5 : function() {
        wizard.buildSubscreen('searchProperty');
        wizard.flags.earthOffPerson = undefined;
        wizard.flags.earthOff = '5';
        var fldValue = wizard.getField('earthOff','earthOff5').value;
        if (fldValue) {
          wizard.resetField('earthOff5',{ text:'Click to search:', value:'' })
        }
    },
    earthOffPerson6 : function() {
        wizard.buildSubscreen('searchClient');
        wizard.flags.earthOffPerson = '6';
        wizard.flags.earthOff = undefined;
        var fldValue = wizard.getField('earthOff','earthOffPerson6').value;
        if (fldValue) {
          wizard.resetField('earthOffPerson6',{text:'Click to search:', value:''})
        }
    },
    earthOff6 : function() {
        wizard.buildSubscreen('searchProperty');
        wizard.flags.earthOffPerson = undefined;
        wizard.flags.earthOff = '6';
        var fldValue = wizard.getField('earthOff','earthOff6').value;
        if (fldValue) {
          wizard.resetField('earthOff6',{ text:'Click to search:', value:'' })
        }
    },
    earthOffPerson7 : function() {
        wizard.buildSubscreen('searchClient');
        wizard.flags.earthOffPerson = '7';
        wizard.flags.earthOff = undefined;
        var fldValue = wizard.getField('earthOff','earthOffPerson7').value;
        if (fldValue) {
          wizard.resetField('earthOffPerson7',{text:'Click to search:', value:''})
        }
    },
    earthOff7 : function() {
        wizard.buildSubscreen('searchProperty');
        wizard.flags.earthOffPerson = undefined;
        wizard.flags.earthOff = '7';
        var fldValue = wizard.getField('earthOff','earthOff7').value;
        if (fldValue) {
          wizard.resetField('earthOff7',{ text:'Click to search:', value:'' })
        }
    },
    earthOffPerson8 : function() {
        wizard.buildSubscreen('searchClient');
        wizard.flags.earthOffPerson = '8';
        wizard.flags.earthOff = undefined;
        var fldValue = wizard.getField('earthOff','earthOffPerson8').value;
        if (fldValue) {
          wizard.resetField('earthOffPerson8',{text:'Click to search:', value:''})
        }
    },
    earthOff8 : function() {
        wizard.buildSubscreen('searchProperty');
        wizard.flags.earthOffPerson = undefined;
        wizard.flags.earthOff = '8';
        var fldValue = wizard.getField('earthOff','earthOff8').value;
        if (fldValue) {
          wizard.resetField('earthOff8',{ text:'Click to search:', value:'' })
        }
    },
    earthOffPerson9 : function() {
        wizard.buildSubscreen('searchClient');
        wizard.flags.earthOffPerson = '9';
        wizard.flags.earthOff = undefined;
        var fldValue = wizard.getField('earthOff','earthOffPerson9').value;
        if (fldValue) {
          wizard.resetField('earthOffPerson9',{text:'Click to search:', value:''})
        }
    },
    earthOff9 : function() {
        wizard.buildSubscreen('searchProperty');
        wizard.flags.earthOffPerson = undefined;
        wizard.flags.earthOff = '9';
        var fldValue = wizard.getField('earthOff','earthOff9').value;
        if (fldValue) {
          wizard.resetField('earthOff9',{ text:'Click to search:', value:'' })
        }
    },
    earthOffPerson10 : function() {
        wizard.buildSubscreen('searchClient');
        wizard.flags.earthOffPerson = '10';
        wizard.flags.earthOff = undefined;
        var fldValue = wizard.getField('earthOff','earthOffPerson10').value;
        if (fldValue) {
          wizard.resetField('earthOffPerson10',{text:'Click to search:', value:''})
        }
    },
    earthOff10 : function() {
        wizard.buildSubscreen('searchProperty');
        wizard.flags.earthOffPerson = undefined;
        wizard.flags.earthOff = '10';
        var fldValue = wizard.getField('earthOff','earthOff10').value;
        if (fldValue) {
          wizard.resetField('earthOff10',{ text:'Click to search:', value:'' })
        }
    },
    earthOffPerson11 : function() {
        wizard.buildSubscreen('searchClient');
        wizard.flags.earthOffPerson = '11';
        wizard.flags.earthOff = undefined;
        var fldValue = wizard.getField('earthOff','earthOffPerson11').value;
        if (fldValue) {
          wizard.resetField('earthOffPerson11',{text:'Click to search:', value:''})
        }
    },
    earthOff11 : function() {
        wizard.buildSubscreen('searchProperty');
        wizard.flags.earthOffPerson = undefined;
        wizard.flags.earthOff = '11';
        var fldValue = wizard.getField('earthOff','earthOff11').value;
        if (fldValue) {
          wizard.resetField('earthOff11',{ text:'Click to search:', value:'' })
        }
    },
    earthOffPerson12 : function() {
        wizard.buildSubscreen('searchClient');
        wizard.flags.earthOffPerson = '12';
        wizard.flags.earthOff = undefined;
        var fldValue = wizard.getField('earthOff','earthOffPerson12').value;
        if (fldValue) {
          wizard.resetField('earthOffPerson12',{text:'Click to search:', value:''})
        }
    },
    earthOff12 : function() {
        wizard.buildSubscreen('searchProperty');
        wizard.flags.earthOffPerson = undefined;
        wizard.flags.earthOff = '12';
        var fldValue = wizard.getField('earthOff','earthOff12').value;
        if (fldValue) {
          wizard.resetField('earthOff12',{ text:'Click to search:', value:'' })
        }
    },
    eSign : function() {
        wizard.eSign();
    },
    immediateFamily : function(event) {
        if (event.target.tagName.toLowerCase() != 'input') {
            switch(this.getAttribute('class')) {
            case 'clickcheckbox':
                var checkbox = this.firstChild;
                var relationshipId = checkbox.id.split('_')[1];
                var relationship = wizard.getTableRow('immediateFamily',
                                                        relationshipId);
                var linkedClient = relationship.getValue('linkedClient');
                if (!checkbox.checked)
                    wizard.makePresent(linkedClient);
                else
                    wizard.makeAbsent(linkedClient);
                render.checkCheckbox(checkbox.id, !checkbox.checked);
                break;
            case 'clickradiobutton':
                var radio = this.firstChild;
                var arr = radio.id.split('_');
                var columnId = arr[2];
                var relationshipId = arr[1];
                var relationship = wizard.getTableRow('immediateFamily',
                                                        relationshipId);
                var linkedClient = relationship.getValue('linkedClient');
                switch(columnId) {
                case 'isInformant':
                    wizard.makeInformant(linkedClient);
                   
                    break;
                case 'isNextOfKin':
                    wizard.makeNextOfKin(linkedClient);
                    break;
                default:
                }
                render.checkCheckbox(radio.id, true);
                break;
            default:
                var rowId = this.parentElement.id.split('_').pop();
                wizard.toggleFamilySelection(rowId);
            }
        } else {
            var input = this.firstChild;
            var arr = input.id.split('_');
            var columnId = arr[2];
            var relationshipId = arr[1];
            var relationship = wizard.getTableRow('immediateFamily',
                                                    relationshipId);
            var linkedClient = relationship.getValue('linkedClient');
            switch(columnId) {
            case 'isInformant':
                wizard.makeInformant(linkedClient);
                break;
            case 'isNextOfKin':
                wizard.makeNextOfKin(linkedClient);
                break;
            case 'isPresentAtArrangement':
                if (input.checked)
                    wizard.makePresent(linkedClient);
                else
                    wizard.makeAbsent(linkedClient);
                break;
            default:
            }
        }
    },
    linkedClient : function() {
        debugger
        var table = wizard.getHeaderField('immediateFamily');
        if (!table.selection)
            wizard.buildSubscreen('createSearchMember');
    },
    cemeteryName : function() {
        wizard.buildSubscreen('createSearchCemetery');
    },
    nameOfRabbi : function() {
//          wizard.buildSubscreen('searchRabbi');
        wizard.buildSubscreen('createSearchRabbi');
    },
    next : function() {
        if (render.checkMandatoryFields())
            wizard.moveToNextScreen();
    },
    noDeed : function() {
        wizard.resetField('deed', {
            text : CNST.noDeed,
            value : CNST.notAvailable
        });
        wizard.removeSubscreen();
    },
    propertyNotYetPurchased : function() {
        wizard.resetField('decedentHasProperty', {
            text : 'F',
            value : false
        });
        wizard.resetField('intermentSpace', {
            text : CNST.toBePurchased,
            value : CNST.toBeDecided
        });
        wizard.removeSubscreen();
    },
    radioRow : function() {
        var id = this.id.split('_').slice(1).join('_');
        render.getInput(id).prop('checked', true);
    },
    rescheduleService : function() {
        wizard.clearTimeSlot();
        // wizard.resetField('scheduleMonths', { text : '', value : '' });
        wizard.resetField('scheduleDate', { text : '', value : '' });
        render.showAllMainFields();
        wizard.checkTimeSlots(function(data) {
            log('rescheduleService: check time slots', data)
        });
        // var startDate = new Date();
        // var endDate = new Date();
        // endDate.setDate(startDate.getDate() + CNST.defaultDaySpan);
        // wizard.loadTimeSlots(startDate, endDate);
    },
    returnToSearch : function() {
        var field = wizard.getSubField('returnToSearch');
        wizard.buildSubscreen(field.returnTo);
    },
    runCRE : function() {
        wizard.runCRE();
    },
    runMap : function() {
        wizard.runMap();
    },
    sameAsDecedents : function() {
        [
            'addressLine1',
            'addressLine2',
            'cityInBook',
            'countryInBook',
            'zip'
        ].forEach(function(fieldId) {
            var value = wizard.getValue('decedent', fieldId);
            wizard.pushToSave('linkedClient', fieldId, value);
        });
        var country = wizard.getValue('decedent', 'countryInBook');
        if (country == 'US') {
            var state = wizard.getValue('decedent', 'stateDropDown');
            wizard.pushToSave('linkedClient', 'stateDropDown', state);
        } else {
            var state = wizard.getValue('decedent', 'stateText');
            wizard.pushToSave('linkedClient', 'stateText', state);
        }

        wizard.showLoadingSubscreen('Saving linked client record');
        wizard.saveEntity('linkedClient', 'family', null, function() {
            var table = wizard.getHeaderField('immediateFamily');
            if (table.selection) {
                wizard.reloadRelationship(table.selection, complete);
            } else {
                wizard.loadLinkedClientResult(complete);
            }
            function complete(data) {
//                  render.redrawHeaderField('immediateFamily');
                wizard.redrawFamilyTable();
                render.showSelection(table);
                var field = wizard.getCurrentField('shippingAddress');
                field.text = data.getText('shippingAddress');
                field.value = data.getValue('shippingAddress');
                render.redrawField(field);
                wizard.removeSubscreen();
                render.showAllMainFields();
            }
        });
    },
    saveSubscreen : function() {
        var subscreen = wizard.getSubscreen();
        switch(subscreen.id) {
        case 'enterAddress':
            debugger;
            [
                'addressLine1',
                'addressLine2',
                'cityInBook',
                'countryInBook',
                'zip'
            ].forEach(function(fieldId) {
                var value = wizard.getSubFieldValue(fieldId);
                wizard.pushToSave('linkedClient', fieldId, value);
            });
            var country = wizard.getSubFieldValue('countryInBook');
            if (country == 'US') {
                var state = wizard.getSubFieldValue('stateDropDown')
                wizard.pushToSave('linkedClient', 'stateDropDown', state);
            } else {
                var state = wizard.getSubFieldValue('stateText');
                wizard.pushToSave('linkedClient', 'stateText', state);
            }

            wizard.showLoadingSubscreen('Saving linked client record');
            wizard.saveEntity('linkedClient', 'family', null, function() {
                var table = wizard.getHeaderField('immediateFamily');
                if (table.selection)
                    wizard.reloadRelationship(table.selection, complete);
                else
                    wizard.loadLinkedClientResult(complete);

                function complete(data) {
//                      render.redrawHeaderField('immediateFamily');
                    wizard.redrawFamilyTable();
                    render.showSelection(table);
                    var field = wizard.getCurrentField('shippingAddress');
                    field.text = data.getText('shippingAddress');
                    field.value = data.getValue('shippingAddress');
                    render.redrawField(field);
                    wizard.removeSubscreen();
                    render.showAllMainFields();
                }
            });
            break;
        case 'enterName':
            [
                'firstName',
                'middleName',
                'lastName'
            ].forEach(function(fieldId) {
                var value = wizard.getSubFieldValue(fieldId);
                wizard.pushToSave('linkedClient', fieldId, value);
            });

            wizard.showLoadingSubscreen('Saving linked client record');
            wizard.saveEntity('linkedClient', 'family', null, function() {
                var table = wizard.getHeaderField('immediateFamily');
                if (table.selection) {
                    wizard.reloadRelationship(table.selection,
                    function(family) {
//                          render.redrawHeaderField('immediateFamily');
                        wizard.redrawFamilyTable();
                        render.showSelection(table);
                        [
                            'linkedClient',
                            'altName'
                        ].forEach(function(fieldId) {
                            var field = wizard.getCurrentField(fieldId);
                            field.text = family.getText(fieldId);
                            field.value = family.getValue(fieldId);
                            render.redrawField(field);
                        });
                        wizard.removeSubscreen();
                    });
                } else {
                    wizard.loadAltName(function(name) {
                        var field = wizard.getCurrentField('linkedClient');
                        field.text =
                            wizard.getText('linkedClient', 'entityId');
                        field.value =
                            wizard.getValue('linkedClient', 'entityId');
                        render.redrawField(field);

                        var field = wizard.getCurrentField('altName');
                        field.text = name;
                        field.value = name;
                        render.redrawField(field);

                        wizard.removeSubscreen();
                    });
                }
            })
            break;
        case 'confirmOutsideCemetery':
            subscreen.fields.forEach(field => {
                if (field.id == 'saveSubscreen') return
                wizard.pushToSave('outsideCemetery', field.id, field.value);
            })
            wizard.saveEntity('outsideCemetery', wizard.nav.sectionId, null,
                function(id) {
                    complete(id);
                });

            function complete(id) {
                const field = wizard.getCurrentField('cemeteryName');
                field.value = id
                field.text = wizard.getSubField('cemeteryCompanyName').value
                render.redrawField(field);
                wizard.removeSubscreen();
            }
            break;
        default:
        }
    },
    searchResults : function() {
        var field = wizard.getSubField('searchResults');
        var parentElement = this.parentElement;
        var id = parentElement.id.split('_').pop();
        if (wizard.flags.earthOffPerson) {
            field.saveTo = 'earthOffPerson'+ wizard.flags.earthOffPerson;
            var earthOff = 'earthOff'+ wizard.flags.earthOffPerson;
            wizard.loadClientIntermentSpace(id, function(intermentSpace) {
                wizard.resetField(earthOff, {
                    text : intermentSpace.getValue('name'),
                    value : intermentSpace.id
                });
            });
            wizard.flags.earthOffPerson = undefined;
        }
        else if (wizard.flags.earthOff) {
            field.saveTo = 'earthOff'+ wizard.flags.earthOff;
            var earthOffPerson = 'earthOffPerson'+ wizard.flags.earthOff;
            wizard.loadIntermentSpaceClient(id, function(data) {
                wizard.resetField(earthOffPerson, {
                    text : data.entity + ' ' + data.firstname + ' ' + data.lastname,
                    value : data.clientId
                });
            });
            wizard.flags.earthOff = undefined;
        }

        if (field.saveTo) {
            var text = wizard.getTableRow('search', id).getValue('name');
            if (field.saveTo.indexOf('earthOffPerson') > -1) {
                var row = wizard.getTableRow('search', id);
                text = row.getValue('entityId') + ' ' + row.getValue('altName')
            }
            if (field.loadEntity) {
                var entityName = field.loadEntity;
                wizard.entity[entityName].id = id;
                var message = 'Loading record for '+ text;
                wizard.showLoadingSubscreen(message);
                wizard.loadEntity(entityName, function() {
                    if (field.saveTo == 'linkedClient') {
                        var table =
                                wizard.getHeaderField('immediateFamily');
                        var rowId = table.selection;
                        if (rowId) {
                            var row = wizard.getTableRow('immediateFamily',
                                                            rowId);
                            wizard.saveToRelationship(rowId, 'linkedClient',
                                                        id);
                            wizard.saveRelationship(rowId, function() {
                                wizard.reloadRelationship(rowId,
                                function() {
                                    wizard.redrawFamilyTable();
                                    wizard.toggleFamilySelection(rowId);
                                    wizard.toggleFamilySelection(rowId);
//                                      render.showSelection(table);
//                                      wizard.loadAltName(function(altName) {
//                                          wizard.resetField('altName', {
//                                              text : altName,
//                                              value : altName
//                                          });
//                                          complete(text);
//                                      });
                                });
                            });
                        } else {
                            wizard.loadLinkedClientResult(function(result) {
                                render.showAllMainFields();
                                wizard.hideField('deleteFamilyMember');
                                wizard.flags.addingFamilyMember = false;
                                wizard.resetField('altName', {
                                    text : result.getText('altName'),
                                    value : result.getValue('altName')
                                });
                                wizard.resetField('shippingAddress', {
                                    text :
                                        result.getText('shippingAddress'),
                                    value :
                                        result.getValue('shippingAddress')
                                });
                                wizard.resetField('phone', {
                                    text : result.getText('phone'),
                                    value : result.getValue('phone')
                                });
                                wizard.resetField('email', {
                                    text : result.getText('email'),
                                    value : result.getValue('email')
                                });
                                complete(text);
                               
                            })
//                              wizard.loadAltName(function(altName) {
//                                  wizard.resetField('altName', {
//                                      text : altName,
//                                      value : altName
//                                  });
//                                  complete(text);
//                              });
                        }
//                      } else if (field.saveTo == 'spouse') {
//                          var survivingSpouseScreen =
//                              wizard.getScreen('survivingSpouse');
                    } else if (entityName == 'rabbi') {
                        // wizard.resetField('rabbiReservationPhone', {
                        //     text : wizard.getText('rabbi', 'mobilePhone'),
                        //     value : wizard.getValue('rabbi', 'mobilePhone')
                        // });
                        // wizard.resetField('templePhone', {
                        //     text : wizard.getText('rabbi', 'phone'),
                        //     value : wizard.getValue('rabbi', 'phone')
                        // });
                        complete(text);
                    } else {
                        complete(text);
                    }
                });
            } else {
                complete(text);
            }

            function complete(text) {
                wizard.resetField(field.saveTo, {
                    text : text,
                    value : id
                });
                wizard.table.search = [];
                wizard.removeSubscreen();
            }
        } else if (field.sendToSubscreen) {
            wizard.handler.sendToSubscreen[field.sendToSubscreen](id);
        }
        wizard.table.search = [];
    },
    searchResultsFamily : function() {
        console.log('clickField searchResultsFamily')
        debugger;
        var field = wizard.getSubField('searchResultsFamily');
        var parentElement = this.parentElement;
        var id = parentElement.id.split('_').pop();

        if (field.saveTo) {
            var text = wizard.getTableRow('searchFamily', id).getValue('altName');
            if (field.loadEntity) {
                var entityName = field.loadEntity;
                wizard.entity[entityName].id = id;
                var message = 'Loading record for '+ text;
                wizard.showLoadingSubscreen(message);
                wizard.loadEntity(entityName, function() {
                    if (field.saveTo == 'linkedClient') {
                        var table = wizard.getHeaderField('immediateFamily');
                        var rowId = table.selection;
                        if (rowId) {
                            var row = wizard.getTableRow('immediateFamily', rowId);
                            wizard.saveToRelationship(rowId, 'linkedClient', id);
                            wizard.saveRelationship(rowId, function() {
                                wizard.reloadRelationship(rowId,
                                function() {
                                    wizard.redrawFamilyTable();
                                    wizard.toggleFamilySelection(rowId);
                                    wizard.toggleFamilySelection(rowId);
                                });
                            });
                        } else {
                            wizard.loadLinkedClientResult(function(result) {
                                render.showAllMainFields();
                                wizard.hideField('deleteFamilyMember');
                                wizard.flags.addingFamilyMember = false;
                                wizard.resetField('altName', {
                                    text : result.getText('altName'),
                                    value : result.getValue('altName')
                                });
                                wizard.resetField('shippingAddress', {
                                    text : result.getText('shippingAddress'),
                                    value : result.getValue('shippingAddress')
                                });
                                wizard.resetField('phone', {
                                    text : result.getText('phone'),
                                    value : result.getValue('phone')
                                });
                                wizard.resetField('email', {
                                    text : result.getText('email'),
                                    value : result.getValue('email')
                                });
                                complete(text);
                            })
                        }
                    } else {
                        complete(text);
                    }
                });
            } else {
                complete(text);
            }

            function complete(text) {
                wizard.resetField(field.saveTo, {
                    text : text,
                    value : id
                });
                wizard.table.searchFamily = [];
                wizard.removeSubscreen();
            }
        }
        wizard.table.searchFamily = [];
    },
    section : function() {
        if (wizard.nav.sectionId != this.id)
            wizard.moveToSection(this.id);
    },
    shippingAddress : function() {
        debugger;
        render.hideAllMainFields();
        wizard.buildSubscreen('enterAddress');
    },
    showMore : function() {
        for (var i = 6; i <= 12; i++) {
            render.showField('earthOff'+ i, 'earthOffPerson'+ i);
        }
        render.hideField('showMore');
    },
    spouse : function() {
        wizard.buildSubscreen('createSearchSpouse');
    },
    ssn : function() {
//          wizard.buildSubscreen('enterSSN');
        var ssn = wizard.getCurrentField('ssn');
        ssn.type = 'text';
        render.redrawField(ssn);
    },
//      test : function() {
//          var options = [
//              {
//                  day : 28,
//                  month : 5,
//                  year : 2020
//              },
//              {
//                  day : 10,
//                  month : 6,
//                  year : 2020
//              },
//              {
//                  day : 22,
//                  month : 6,
//                  year : 2020
//              },
//              {
//                  day : 3,
//                  month : 7,
//                  year : 2020
//              },
//              {
//                  day : 15,
//                  month : 7,
//                  year : 2020
//              },
//              {
//                  day : 27,
//                  month : 7,
//                  year : 2020
//              },
//              {
//                  day : 8,
//                  month : 8,
//                  year : 2020
//              },
//              {
//                  day : 20,
//                  month : 8,
//                  year : 2020
//              },
//              {
//                  day : 2,
//                  month : 9,
//                  year : 2020
//              },
//              {
//                  day : 14,
//                  month : 9,
//                  year : 2020
//              },
//              {
//                  day : 26,
//                  month : 9,
//                  year : 2020
//              },
//              {
//                  day : 7,
//                  month : 10,
//                  year : 2020
//              },
//              {
//                  day : 19,
//                  month : 10,
//                  year : 2020
//              },
//              {
//                  day : 1,
//                  month : 11,
//                  year : 2020
//              },
//              {
//                  day : 13,
//                  month : 11,
//                  year : 2020
//              },
//              {
//                  day : 25,
//                  month : 11,
//                  year : 2020
//              },
//              {
//                  day : 6,
//                  month : 0,
//                  year : 2021
//              },
//              {
//                  day : 18,
//                  month : 0,
//                  year : 2021
//              },
//              {
//                  day : 30,
//                  month : 0,
//                  year : 2021
//              },
//              {
//                  day : 11,
//                  month : 1,
//                  year : 2021
//              },
//              {
//                  day : 23,
//                  month : 1,
//                  year : 2021
//              },
//              {
//                  day : 7,
//                  month : 2,
//                  year : 2021
//              }
//          ];
//          function f(i) {
//              wizard.db.link.sendRequest( 'createTimeSlots', options[i],
//              function() {
//                  if (i < options.length - 1)
//                      f(i+1);
//              }, 'test');
//          }
//          f(0);
//      },
//      test : async function() {
//          log('hello');
////            var response = await fetch('/core/media/media.nl?id=123604&c=3963881_SB1&h=6e8aec15815066b33136&_xt=.pdf');
//          var response1 = await fetch('/core/media/media.nl?id=130119&c=3963881_SB1&h=214959f3ef29b33d2259&_xt=.pdf');
//          var buffer1 = await response1.arrayBuffer();
////            var existingPdfDocBytes = new Uint8Array(buffer);
//          var pdfDoc1 = await PDFLib.PDFDocument.load(buffer1);
//
//          var response2 = await fetch('/core/media/media.nl?id=13048&c=3963881_SB1&h=c9083b0e34efa9305a01&_xt=.pdf');
//          var buffer2 = await response2.arrayBuffer();
//          var pdfDoc2 = await PDFLib.PDFDocument.load(buffer2);
////            var pages = pdfDoc2.getPages();
////            pages.forEach(function(page) {
////                pdfDoc1.addPage(page);
////            });
//          var indices = Array.from(Array(pdfDoc2.getPageCount()).keys());
//          var copiedPages = await pdfDoc1.copyPages(pdfDoc2, indices);
//          copiedPages.forEach(function(page) {
//              pdfDoc1.addPage(page);
//          });
////            log(pdfDoc.getPageCount());
////            var pdfBytes = await pdfDoc1.save();
////            log(pdfBytes);
////            var blob = new Blob(pdfBytes, { type : 'application/pdf' });
////            log(blob);
//          var base64DataUri = await pdfDoc1.saveAsBase64({ dataUri : true });
////            log(base64DataUri);
//          var element = document.createElement('a');
////            element.setAttribute('href', base64DataUri);
//          element.href = base64DataUri;
////            element.setAttribute('download', 'test.pdf');
//          element.download = 'test.pdf';
////            element.setAttribute('target', '_blank');
//
//          element.style.display = 'none';
//          document.body.appendChild(element);
//
//          element.click();
//
//          document.body.removeChild(element);
//      }
},
mouseIn : {
    altName : function() {
        this.style.color = DEF.COLOUR.inform;
    },
    linkedClient : function() {
        var table = wizard.getHeaderField('immediateFamily');
        if (!table.selection)
            this.innerHTML = CNST.clickToCreateSearch;
    },
    cemeteryName : function() {
        this.innerHTML = CNST.clickToCreateSearch;
    },
    shippingAddress : function() {
        this.style.color = DEF.COLOUR.inform;
    },
    spouse : function() {
        this.innerHTML = CNST.clickToCreateSearch;
    },
    ssn : function() {
        this.innerHTML = wizard.getCurrentFieldValue('ssn');
    }
},
mouseOut : {
    altName : function() {
        this.style.color = 'white';
    },
    linkedClient : function() {
        this.innerHTML = wizard.getCurrentFieldText('linkedClient');
    },
    cemeteryName : function() {
        this.innerHTML = wizard.getCurrentFieldText('cemeteryName');
    },
    shippingAddress : function() {
        this.style.color = 'white';
    },
    spouse : function() {
        this.innerHTML = wizard.getCurrentFieldText('spouse');
    },
    ssn : function() {
        this.innerHTML = wizard.getCurrentFieldText('ssn');
    }
},
validateField : {
    numberGrandchildren : function() {
        var n = wizard.getHeaderFieldValue('numberGrandchildren');
        return Number.isInteger(+n);
    },
    numberGreatGrandchildren : function() {
        var n = wizard.getHeaderFieldValue('numberGreatGrandchildren');
        return Number.isInteger(+n);
    },
    rabbiReservationPhone : function() {
        var tel = wizard.getCurrentFieldValue('rabbiReservationPhone');
        return tel.length <= 21;
    },
    attendanceExpected : function() {
        var n = wizard.getCurrentFieldValue('attendanceExpected');
        return Number.isInteger(+n);
    },
//      serviceStartTime : function() {
//          var time = wizard.getCurrentFieldValue('serviceStartTime');
////            var minute = time.getUTCMinutes();
//          var arr = time.split(':');
//          var minute = +arr[1];
//          return (minute == 0) || (minute == 30);
//      },
    ssn : function() {
        var ssn = wizard.getCurrentFieldValue('ssn');
        return ssn.length == 0
                || RegExp('^[0-9]{9}$').test(ssn);
    },
    templePhone : function() {
        var tel = wizard.getCurrentFieldValue('templePhone');
        return tel.length <= 21;
    },
    timeOfDeath : function() {
        var tod = wizard.getCurrentFieldValue('timeOfDeath');
        if (tod.length == 0) {
            return true;
        } else if (tod.length == 4 && !isNaN(tod)) {
            tod = Number(tod);
            if (tod >= 0 && Number.isInteger(tod)) {
                var minutes = tod % 100;
                var hours = tod - minutes;
                return (hours <= 2300 && minutes <= 59);
            }
        }
        return true;
    }
}};

wizard.initWizard();

log(wizard.user, wizard, render);

var endTime = Date.now();
var totalTime = endTime - startTime;
log('Initialize complete: '+ totalTime +' msec');
});
